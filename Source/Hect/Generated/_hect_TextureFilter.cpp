// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\Texture.h"

using namespace hect;

template <>
const std::string& Enum::toString<TextureFilter>(TextureFilter value)
{
    static std::map<TextureFilter, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[TextureFilter_Nearest] = "Nearest";
        _valueToString[TextureFilter_Linear] = "Linear";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'TextureFilter'");
    }
    return it->second;
}

template <>
TextureFilter Enum::fromString<TextureFilter>(const std::string& string)
{
    static std::map<std::string, TextureFilter> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Nearest"] = TextureFilter_Nearest;
        _stringToValue["Linear"] = TextureFilter_Linear;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'TextureFilter'", string.c_str()));
    }
    return it->second;
}

