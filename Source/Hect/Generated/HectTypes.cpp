// Generated by reflect.py
#include "Hect/Reflection/Type.h"

#include "..\Math\Angle.h"
#include "..\Core\Any.h"
#include "..\IO\Decoder.h"
#include "..\IO\Encoder.h"
#include "..\IO\AssetCache.h"
#include "..\IO\AssetEntry.h"
#include "..\Spacial\AxisAlignedBox.h"
#include "..\IO\BinaryDecoder.h"
#include "..\IO\BinaryEncoder.h"
#include "..\Spacial\Components\BoundingBox.h"
#include "..\Debug\BoundingBoxDebugRenderLayer.h"
#include "..\Spacial\Systems\BoundingBoxSystem.h"
#include "..\Spacial\Box.h"
#include "..\Graphics\Components\Camera.h"
#include "..\Logic\Component.h"
#include "..\Logic\Component.h"
#include "..\Logic\Component.h"
#include "..\Logic\ComponentPool.h"
#include "..\Debug\DebugRenderLayer.h"
#include "..\Debug\Systems\DebugRenderSystem.h"
#include "..\IO\Decoder.h"
#include "..\Graphics\Components\DirectionalLight.h"
#include "..\IO\Encodable.h"
#include "..\IO\Encoder.h"
#include "..\Logic\Entity.h"
#include "..\Logic\Entity.h"
#include "..\Logic\Entity.h"
#include "..\Logic\Entity.h"
#include "..\Logic\Entity.h"
#include "..\Logic\Entity.h"
#include "..\Logic\Entity.h"
#include "..\Logic\EntityEvent.h"
#include "..\Logic\EntityPool.h"
#include "..\Core\Error.h"
#include "..\IO\FileReadStream.h"
#include "..\IO\FileSystem.h"
#include "..\IO\FileWriteStream.h"
#include "..\Graphics\FrameBuffer.h"
#include "..\Spacial\Frustum.h"
#include "..\Graphics\Image.h"
#include "..\IO\Encoders\ImagePngEncoder.h"
#include "..\Input\InputAxis.h"
#include "..\IO\Encoders\InputAxisEncoder.h"
#include "..\Input\InputSystem.h"
#include "..\Network\IpAddress.h"
#include "..\IO\JsonDecoder.h"
#include "..\IO\JsonEncoder.h"
#include "..\IO\JsonValue.h"
#include "..\Input\Keyboard.h"
#include "..\Input\Keyboard.h"
#include "..\Graphics\Components\LightProbe.h"
#include "..\Logic\Loop.h"
#include "..\Graphics\Material.h"
#include "..\IO\Encoders\MaterialEncoder.h"
#include "..\IO\MemoryReadStream.h"
#include "..\IO\MemoryWriteStream.h"
#include "..\Graphics\Mesh.h"
#include "..\IO\Encoders\MeshEncoder.h"
#include "..\Graphics\MeshReader.h"
#include "..\Graphics\MeshWriter.h"
#include "..\Graphics\Components\Model.h"
#include "..\Graphics\Components\Model.h"
#include "..\Input\Mouse.h"
#include "..\Input\Mouse.h"
#include "..\IO\Decoder.h"
#include "..\IO\Encoder.h"
#include "..\Network\Packet.h"
#include "..\Graphics\Pass.h"
#include "..\Graphics\PassUniformValue.h"
#include "..\IO\Path.h"
#include "..\Network\PeerHandle.h"
#include "..\Graphics\Systems\PhysicallyBasedRenderSystem.h"
#include "..\Physics\Systems\PhysicsSystem.h"
#include "..\Spacial\Plane.h"
#include "..\Noise\Random.h"
#include "..\IO\ReadStream.h"
#include "..\Graphics\Renderer.h"
#include "..\Graphics\RendererObject.h"
#include "..\Graphics\RenderState.h"
#include "..\Graphics\Systems\RenderSystem.h"
#include "..\Graphics\RenderTarget.h"
#include "..\Physics\Components\RigidBody.h"
#include "..\Logic\Scene.h"
#include "..\Graphics\Shader.h"
#include "..\IO\Encoders\ShaderEncoder.h"
#include "..\Graphics\ShaderModule.h"
#include "..\Graphics\Components\SkyBox.h"
#include "..\Network\Socket.h"
#include "..\Network\Socket.h"
#include "..\Spacial\Sphere.h"
#include "..\Logic\System.h"
#include "..\Concurrency\Task.h"
#include "..\Concurrency\Task.h"
#include "..\Concurrency\TaskPool.h"
#include "..\Graphics\Technique.h"
#include "..\Graphics\Texture.h"
#include "..\IO\Encoders\TextureEncoder.h"
#include "..\Timing\Timer.h"
#include "..\Timing\TimeSpan.h"
#include "..\Spacial\Components\Transform.h"
#include "..\Debug\TransformDebugRenderLayer.h"
#include "..\Spacial\Systems\TransformSystem.h"
#include "..\Core\Uncopyable.h"
#include "..\Graphics\Uniform.h"
#include "..\IO\Encoders\UniformEncoder.h"
#include "..\Graphics\UniformValue.h"
#include "..\IO\Encoders\UniformValueEncoder.h"
#include "..\Graphics\VertexAttribute.h"
#include "..\Graphics\VertexLayout.h"
#include "..\IO\Encoders\VertexLayoutEncoder.h"
#include "..\Graphics\VideoMode.h"
#include "..\Graphics\Window.h"
#include "..\IO\WriteStream.h"
#include "..\Core\Logging.h"
#include "..\Graphics\Image.h"
#include "..\Graphics\Image.h"
#include "..\Graphics\Image.h"
#include "..\Graphics\Mesh.h"
#include "..\Graphics\Mesh.h"
#include "..\Graphics\RenderState.h"
#include "..\Graphics\RenderState.h"
#include "..\Graphics\ShaderModule.h"
#include "..\Graphics\Texture.h"
#include "..\Graphics\Texture.h"
#include "..\Graphics\Uniform.h"
#include "..\Graphics\UniformValue.h"
#include "..\Graphics\VertexAttribute.h"
#include "..\Graphics\VertexAttribute.h"
#include "..\Input\InputAxis.h"
#include "..\Input\Keyboard.h"
#include "..\Input\Keyboard.h"
#include "..\Input\Mouse.h"
#include "..\Input\Mouse.h"
#include "..\Input\Mouse.h"
#include "..\IO\JsonValue.h"
#include "..\Logic\ComponentEvent.h"
#include "..\Logic\EntityEvent.h"
#include "..\Network\Packet.h"
#include "..\Network\PeerHandle.h"
#include "..\Network\Socket.h"
#include "..\Spacial\Frustum.h"

class HectTypes { };
using namespace hect;
template <>
void Type::registerTypes<HectTypes>()
{
    {
        Type& type = Type::create<Angle>(Kind_Class, "Angle");
        type;
    }
    {
        Type& type = Type::create<Any>(Kind_Class, "Any");
        type;
    }
    {
        Type& type = Type::create<ArrayDecoder>(Kind_Class, "ArrayDecoder");
        type;
    }
    {
        Type& type = Type::create<ArrayEncoder>(Kind_Class, "ArrayEncoder");
        type;
    }
    {
        Type& type = Type::create<AssetCache>(Kind_Class, "AssetCache");
        type;
    }
    {
        Type& type = Type::create<AssetEntryBase>(Kind_Class, "AssetEntryBase");
        type;
    }
    {
        Type& type = Type::create<AxisAlignedBox>(Kind_Class, "AxisAlignedBox");
        type;
    }
    {
        Type& type = Type::create<BinaryDecoder>(Kind_Class, "BinaryDecoder");
        type;
    }
    {
        Type& type = Type::create<BinaryEncoder>(Kind_Class, "BinaryEncoder");
        type;
    }
    {
        Type& type = Type::create<BoundingBox>(Kind_Class, "BoundingBox");
        type;
    }
    {
        Type& type = Type::create<BoundingBoxDebugRenderLayer>(Kind_Class, "BoundingBoxDebugRenderLayer");
        type;
    }
    {
        Type& type = Type::create<BoundingBoxSystem>(Kind_Class, "BoundingBoxSystem");
        type;
    }
    {
        Type& type = Type::create<Box>(Kind_Class, "Box");
        type;
    }
    {
        Type& type = Type::create<Camera>(Kind_Class, "Camera");
        type;
    }
    {
        Type& type = Type::create<ComponentBase>(Kind_Class, "ComponentBase");
        type;
    }
    {
        Type& type = Type::create<ComponentPoolBase>(Kind_Class, "ComponentPoolBase");
        type;
    }
    {
        Type& type = Type::create<DebugRenderLayer>(Kind_Class, "DebugRenderLayer");
        type;
    }
    {
        Type& type = Type::create<DebugRenderSystem>(Kind_Class, "DebugRenderSystem");
        type;
    }
    {
        Type& type = Type::create<Decoder>(Kind_Class, "Decoder");
        type;
    }
    {
        Type& type = Type::create<DirectionalLight>(Kind_Class, "DirectionalLight");
        type;
    }
    {
        Type& type = Type::create<Encodable>(Kind_Class, "Encodable");
        type;
    }
    {
        Type& type = Type::create<Encoder>(Kind_Class, "Encoder");
        type;
    }
    {
        Type& type = Type::create<Entity>(Kind_Class, "Entity");
        type;
    }
    {
        Type& type = Type::create<Entity::Children>(Kind_Class, "Entity::Children");
        type;
    }
    {
        Type& type = Type::create<Entity::Children::ConstIter>(Kind_Class, "Entity::Children::ConstIter");
        type;
    }
    {
        Type& type = Type::create<Entity::Children::Iter>(Kind_Class, "Entity::Children::Iter");
        type;
    }
    {
        Type& type = Type::create<Entity::ConstIter>(Kind_Class, "Entity::ConstIter");
        type;
    }
    {
        Type& type = Type::create<Entity::Handle>(Kind_Class, "Entity::Handle");
        type;
    }
    {
        Type& type = Type::create<Entity::Iter>(Kind_Class, "Entity::Iter");
        type;
    }
    {
        Type& type = Type::create<EntityEvent>(Kind_Class, "EntityEvent");
        type;
    }
    {
        Type& type = Type::create<EntityPool>(Kind_Class, "EntityPool");
        type;
    }
    {
        Type& type = Type::create<Enum>(Kind_Class, "Enum");
        type;
    }
    {
        Type& type = Type::create<Error>(Kind_Class, "Error");
        type;
    }
    {
        Type& type = Type::create<FileReadStream>(Kind_Class, "FileReadStream");
        type;
    }
    {
        Type& type = Type::create<FileSystem>(Kind_Class, "FileSystem");
        type;
    }
    {
        Type& type = Type::create<FileWriteStream>(Kind_Class, "FileWriteStream");
        type;
    }
    {
        Type& type = Type::create<FrameBuffer>(Kind_Class, "FrameBuffer");
        type;
    }
    {
        Type& type = Type::create<Frustum>(Kind_Class, "Frustum");
        type;
    }
    {
        Type& type = Type::create<Image>(Kind_Class, "Image");
        type;
    }
    {
        Type& type = Type::create<ImagePngEncoder>(Kind_Class, "ImagePngEncoder");
        type;
    }
    {
        Type& type = Type::create<InputAxis>(Kind_Class, "InputAxis");
        type;
    }
    {
        Type& type = Type::create<InputAxisEncoder>(Kind_Class, "InputAxisEncoder");
        type;
    }
    {
        Type& type = Type::create<InputSystem>(Kind_Class, "InputSystem");
        type;
    }
    {
        Type& type = Type::create<IpAddress>(Kind_Class, "IpAddress");
        type;
    }
    {
        Type& type = Type::create<JsonDecoder>(Kind_Class, "JsonDecoder");
        type;
    }
    {
        Type& type = Type::create<JsonEncoder>(Kind_Class, "JsonEncoder");
        type;
    }
    {
        Type& type = Type::create<JsonValue>(Kind_Class, "JsonValue");
        type;
    }
    {
        Type& type = Type::create<Keyboard>(Kind_Class, "Keyboard");
        type;
    }
    {
        Type& type = Type::create<KeyboardEvent>(Kind_Class, "KeyboardEvent");
        type;
    }
    {
        Type& type = Type::create<LightProbe>(Kind_Class, "LightProbe");
        type;
    }
    {
        Type& type = Type::create<Loop>(Kind_Class, "Loop");
        type;
    }
    {
        Type& type = Type::create<Material>(Kind_Class, "Material");
        type;
    }
    {
        Type& type = Type::create<MaterialEncoder>(Kind_Class, "MaterialEncoder");
        type;
    }
    {
        Type& type = Type::create<MemoryReadStream>(Kind_Class, "MemoryReadStream");
        type;
    }
    {
        Type& type = Type::create<MemoryWriteStream>(Kind_Class, "MemoryWriteStream");
        type;
    }
    {
        Type& type = Type::create<Mesh>(Kind_Class, "Mesh");
        type;
    }
    {
        Type& type = Type::create<MeshEncoder>(Kind_Class, "MeshEncoder");
        type;
    }
    {
        Type& type = Type::create<MeshReader>(Kind_Class, "MeshReader");
        type;
    }
    {
        Type& type = Type::create<MeshWriter>(Kind_Class, "MeshWriter");
        type;
    }
    {
        Type& type = Type::create<Model>(Kind_Class, "Model");
        type;
    }
    {
        Type& type = Type::create<ModelSurface>(Kind_Class, "ModelSurface");
        type;
    }
    {
        Type& type = Type::create<Mouse>(Kind_Class, "Mouse");
        type;
    }
    {
        Type& type = Type::create<MouseEvent>(Kind_Class, "MouseEvent");
        type;
    }
    {
        Type& type = Type::create<ObjectDecoder>(Kind_Class, "ObjectDecoder");
        type;
    }
    {
        Type& type = Type::create<ObjectEncoder>(Kind_Class, "ObjectEncoder");
        type;
    }
    {
        Type& type = Type::create<Packet>(Kind_Class, "Packet");
        type;
    }
    {
        Type& type = Type::create<Pass>(Kind_Class, "Pass");
        type;
    }
    {
        Type& type = Type::create<PassUniformValue>(Kind_Class, "PassUniformValue");
        type;
    }
    {
        Type& type = Type::create<Path>(Kind_Class, "Path");
        type;
    }
    {
        Type& type = Type::create<PeerHandle>(Kind_Class, "PeerHandle");
        type;
    }
    {
        Type& type = Type::create<PhysicallyBasedRenderSystem>(Kind_Class, "PhysicallyBasedRenderSystem");
        type;
    }
    {
        Type& type = Type::create<PhysicsSystem>(Kind_Class, "PhysicsSystem");
        type;
    }
    {
        Type& type = Type::create<Plane>(Kind_Class, "Plane");
        type;
    }
    {
        Type& type = Type::create<Random>(Kind_Class, "Random");
        type;
    }
    {
        Type& type = Type::create<ReadStream>(Kind_Class, "ReadStream");
        type;
    }
    {
        Type& type = Type::create<Renderer>(Kind_Class, "Renderer");
        type;
    }
    {
        Type& type = Type::create<RendererObject>(Kind_Class, "RendererObject");
        type;
    }
    {
        Type& type = Type::create<RenderState>(Kind_Class, "RenderState");
        type;
    }
    {
        Type& type = Type::create<RenderSystem>(Kind_Class, "RenderSystem");
        type;
    }
    {
        Type& type = Type::create<RenderTarget>(Kind_Class, "RenderTarget");
        type;
    }
    {
        Type& type = Type::create<RigidBody>(Kind_Class, "RigidBody");
        type;
    }
    {
        Type& type = Type::create<Scene>(Kind_Class, "Scene");
        type;
    }
    {
        Type& type = Type::create<Shader>(Kind_Class, "Shader");
        type;
    }
    {
        Type& type = Type::create<ShaderEncoder>(Kind_Class, "ShaderEncoder");
        type;
    }
    {
        Type& type = Type::create<ShaderModule>(Kind_Class, "ShaderModule");
        type;
    }
    {
        Type& type = Type::create<SkyBox>(Kind_Class, "SkyBox");
        type;
    }
    {
        Type& type = Type::create<Socket>(Kind_Class, "Socket");
        type;
    }
    {
        Type& type = Type::create<SocketEvent>(Kind_Class, "SocketEvent");
        type;
    }
    {
        Type& type = Type::create<Sphere>(Kind_Class, "Sphere");
        type;
    }
    {
        Type& type = Type::create<System>(Kind_Class, "System");
        type;
    }
    {
        Type& type = Type::create<Task>(Kind_Class, "Task");
        type;
    }
    {
        Type& type = Type::create<Task::Handle>(Kind_Class, "Task::Handle");
        type;
    }
    {
        Type& type = Type::create<TaskPool>(Kind_Class, "TaskPool");
        type;
    }
    {
        Type& type = Type::create<Technique>(Kind_Class, "Technique");
        type;
    }
    {
        Type& type = Type::create<Texture>(Kind_Class, "Texture");
        type;
    }
    {
        Type& type = Type::create<TextureEncoder>(Kind_Class, "TextureEncoder");
        type;
    }
    {
        Type& type = Type::create<Timer>(Kind_Class, "Timer");
        type;
    }
    {
        Type& type = Type::create<TimeSpan>(Kind_Class, "TimeSpan");
        type;
    }
    {
        Type& type = Type::create<Transform>(Kind_Class, "Transform");
        type;
    }
    {
        Type& type = Type::create<TransformDebugRenderLayer>(Kind_Class, "TransformDebugRenderLayer");
        type;
    }
    {
        Type& type = Type::create<TransformSystem>(Kind_Class, "TransformSystem");
        type;
    }
    {
        Type& type = Type::create<Uncopyable>(Kind_Class, "Uncopyable");
        type;
    }
    {
        Type& type = Type::create<Uniform>(Kind_Class, "Uniform");
        type;
    }
    {
        Type& type = Type::create<UniformEncoder>(Kind_Class, "UniformEncoder");
        type;
    }
    {
        Type& type = Type::create<UniformValue>(Kind_Class, "UniformValue");
        type;
    }
    {
        Type& type = Type::create<UniformValueEncoder>(Kind_Class, "UniformValueEncoder");
        type;
    }
    {
        Type& type = Type::create<VertexAttribute>(Kind_Class, "VertexAttribute");
        type;
    }
    {
        Type& type = Type::create<VertexLayout>(Kind_Class, "VertexLayout");
        type;
    }
    {
        Type& type = Type::create<VertexLayoutEncoder>(Kind_Class, "VertexLayoutEncoder");
        type;
    }
    {
        Type& type = Type::create<VideoMode>(Kind_Class, "VideoMode");
        type;
    }
    {
        Type& type = Type::create<Window>(Kind_Class, "Window");
        type;
    }
    {
        Type& type = Type::create<WriteStream>(Kind_Class, "WriteStream");
        type;
    }
    {
        Type& type = Type::create<LogLevel>(Kind_Enum, "LogLevel");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(LogLevel_Info, "Info");
        metaData.addValue(LogLevel_Debug, "Debug");
        metaData.addValue(LogLevel_Warning, "Warning");
        metaData.addValue(LogLevel_Error, "Error");
        metaData.addValue(LogLevel_Trace, "Trace");
    }
    {
        Type& type = Type::create<ColorSpace>(Kind_Enum, "ColorSpace");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(ColorSpace_NonLinear, "NonLinear");
        metaData.addValue(ColorSpace_Linear, "Linear");
    }
    {
        Type& type = Type::create<PixelType>(Kind_Enum, "PixelType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PixelType_Half, "Half");
        metaData.addValue(PixelType_Float, "Float");
        metaData.addValue(PixelType_Byte, "Byte");
    }
    {
        Type& type = Type::create<PixelFormat>(Kind_Enum, "PixelFormat");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PixelFormat_Rgb, "Rgb");
        metaData.addValue(PixelFormat_Rgba, "Rgba");
    }
    {
        Type& type = Type::create<PrimitiveType>(Kind_Enum, "PrimitiveType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PrimitiveType_Triangles, "Triangles");
        metaData.addValue(PrimitiveType_TriangleStrip, "TriangleStrip");
        metaData.addValue(PrimitiveType_Lines, "Lines");
        metaData.addValue(PrimitiveType_LineStrip, "LineStrip");
        metaData.addValue(PrimitiveType_Points, "Points");
    }
    {
        Type& type = Type::create<IndexType>(Kind_Enum, "IndexType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(IndexType_UnsignedByte, "UnsignedByte");
        metaData.addValue(IndexType_UnsignedShort, "UnsignedShort");
        metaData.addValue(IndexType_UnsignedInt, "UnsignedInt");
    }
    {
        Type& type = Type::create<BlendFactor>(Kind_Enum, "BlendFactor");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(BlendFactor_Zero, "Zero");
        metaData.addValue(BlendFactor_One, "One");
        metaData.addValue(BlendFactor_SourceColor, "SourceColor");
        metaData.addValue(BlendFactor_OneMinusSourceColor, "OneMinusSourceColor");
        metaData.addValue(BlendFactor_DestColor, "DestColor");
        metaData.addValue(BlendFactor_OneMinusDestColor, "OneMinusDestColor");
        metaData.addValue(BlendFactor_SourceAlpha, "SourceAlpha");
        metaData.addValue(BlendFactor_OneMinusSourceAlpha, "OneMinusSourceAlpha");
        metaData.addValue(BlendFactor_DestAlpha, "DestAlpha");
        metaData.addValue(BlendFactor_OneMinusDestAlpha, "OneMinusDestAlpha");
    }
    {
        Type& type = Type::create<RenderStateFlag>(Kind_Enum, "RenderStateFlag");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(RenderStateFlag_Blend, "Blend");
        metaData.addValue(RenderStateFlag_DepthTest, "DepthTest");
        metaData.addValue(RenderStateFlag_DepthWrite, "DepthWrite");
        metaData.addValue(RenderStateFlag_CullFace, "CullFace");
    }
    {
        Type& type = Type::create<ShaderModuleType>(Kind_Enum, "ShaderModuleType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(ShaderModuleType_Vertex, "Vertex");
        metaData.addValue(ShaderModuleType_Pixel, "Pixel");
        metaData.addValue(ShaderModuleType_Geometry, "Geometry");
    }
    {
        Type& type = Type::create<TextureFilter>(Kind_Enum, "TextureFilter");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(TextureFilter_Nearest, "Nearest");
        metaData.addValue(TextureFilter_Linear, "Linear");
    }
    {
        Type& type = Type::create<TextureType>(Kind_Enum, "TextureType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(TextureType_2D, "2D");
        metaData.addValue(TextureType_CubeMap, "CubeMap");
    }
    {
        Type& type = Type::create<UniformBinding>(Kind_Enum, "UniformBinding");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(UniformBinding_None, "None");
        metaData.addValue(UniformBinding_RenderTargetSize, "RenderTargetSize");
        metaData.addValue(UniformBinding_CameraPosition, "CameraPosition");
        metaData.addValue(UniformBinding_CameraFront, "CameraFront");
        metaData.addValue(UniformBinding_CameraUp, "CameraUp");
        metaData.addValue(UniformBinding_ViewMatrix, "ViewMatrix");
        metaData.addValue(UniformBinding_ProjectionMatrix, "ProjectionMatrix");
        metaData.addValue(UniformBinding_ViewProjectionMatrix, "ViewProjectionMatrix");
        metaData.addValue(UniformBinding_ModelMatrix, "ModelMatrix");
        metaData.addValue(UniformBinding_ModelViewMatrix, "ModelViewMatrix");
        metaData.addValue(UniformBinding_ModelViewProjectionMatrix, "ModelViewProjectionMatrix");
    }
    {
        Type& type = Type::create<UniformType>(Kind_Enum, "UniformType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(UniformType_Int, "Int");
        metaData.addValue(UniformType_Float, "Float");
        metaData.addValue(UniformType_Vector2, "Vector2");
        metaData.addValue(UniformType_Vector3, "Vector3");
        metaData.addValue(UniformType_Vector4, "Vector4");
        metaData.addValue(UniformType_Matrix4, "Matrix4");
        metaData.addValue(UniformType_Texture, "Texture");
    }
    {
        Type& type = Type::create<VertexAttributeSemantic>(Kind_Enum, "VertexAttributeSemantic");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(VertexAttributeSemantic_Position, "Position");
        metaData.addValue(VertexAttributeSemantic_Normal, "Normal");
        metaData.addValue(VertexAttributeSemantic_Color, "Color");
        metaData.addValue(VertexAttributeSemantic_Tangent, "Tangent");
        metaData.addValue(VertexAttributeSemantic_Binormal, "Binormal");
        metaData.addValue(VertexAttributeSemantic_Weight0, "Weight0");
        metaData.addValue(VertexAttributeSemantic_Weight1, "Weight1");
        metaData.addValue(VertexAttributeSemantic_Weight2, "Weight2");
        metaData.addValue(VertexAttributeSemantic_Weight3, "Weight3");
        metaData.addValue(VertexAttributeSemantic_TextureCoords0, "TextureCoords0");
        metaData.addValue(VertexAttributeSemantic_TextureCoords1, "TextureCoords1");
        metaData.addValue(VertexAttributeSemantic_TextureCoords2, "TextureCoords2");
        metaData.addValue(VertexAttributeSemantic_TextureCoords3, "TextureCoords3");
    }
    {
        Type& type = Type::create<VertexAttributeType>(Kind_Enum, "VertexAttributeType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(VertexAttributeType_Byte, "Byte");
        metaData.addValue(VertexAttributeType_UnsignedByte, "UnsignedByte");
        metaData.addValue(VertexAttributeType_Short, "Short");
        metaData.addValue(VertexAttributeType_UnsignedShort, "UnsignedShort");
        metaData.addValue(VertexAttributeType_Int, "Int");
        metaData.addValue(VertexAttributeType_UnsignedInt, "UnsignedInt");
        metaData.addValue(VertexAttributeType_Half, "Half");
        metaData.addValue(VertexAttributeType_Float, "Float");
    }
    {
        Type& type = Type::create<InputAxisSource>(Kind_Enum, "InputAxisSource");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(InputAxisSource_MouseMoveX, "MouseMoveX");
        metaData.addValue(InputAxisSource_MouseMoveY, "MouseMoveY");
        metaData.addValue(InputAxisSource_MouseButton, "MouseButton");
        metaData.addValue(InputAxisSource_MouseScroll, "MouseScroll");
        metaData.addValue(InputAxisSource_Key, "Key");
    }
    {
        Type& type = Type::create<Key>(Kind_Enum, "Key");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(Key_Unknown, "Unknown");
        metaData.addValue(Key_A, "A");
        metaData.addValue(Key_B, "B");
        metaData.addValue(Key_C, "C");
        metaData.addValue(Key_D, "D");
        metaData.addValue(Key_E, "E");
        metaData.addValue(Key_F, "F");
        metaData.addValue(Key_G, "G");
        metaData.addValue(Key_H, "H");
        metaData.addValue(Key_I, "I");
        metaData.addValue(Key_J, "J");
        metaData.addValue(Key_K, "K");
        metaData.addValue(Key_L, "L");
        metaData.addValue(Key_M, "M");
        metaData.addValue(Key_N, "N");
        metaData.addValue(Key_O, "O");
        metaData.addValue(Key_P, "P");
        metaData.addValue(Key_Q, "Q");
        metaData.addValue(Key_R, "R");
        metaData.addValue(Key_S, "S");
        metaData.addValue(Key_T, "T");
        metaData.addValue(Key_U, "U");
        metaData.addValue(Key_V, "V");
        metaData.addValue(Key_W, "W");
        metaData.addValue(Key_X, "X");
        metaData.addValue(Key_Y, "Y");
        metaData.addValue(Key_Z, "Z");
        metaData.addValue(Key_Num0, "Num0");
        metaData.addValue(Key_Num1, "Num1");
        metaData.addValue(Key_Num2, "Num2");
        metaData.addValue(Key_Num3, "Num3");
        metaData.addValue(Key_Num4, "Num4");
        metaData.addValue(Key_Num5, "Num5");
        metaData.addValue(Key_Num6, "Num6");
        metaData.addValue(Key_Num7, "Num7");
        metaData.addValue(Key_Num8, "Num8");
        metaData.addValue(Key_Num9, "Num9");
        metaData.addValue(Key_Esc, "Esc");
        metaData.addValue(Key_Space, "Space");
        metaData.addValue(Key_Enter, "Enter");
        metaData.addValue(Key_Backspace, "Backspace");
        metaData.addValue(Key_Tab, "Tab");
        metaData.addValue(Key_Tick, "Tick");
        metaData.addValue(Key_F1, "F1");
        metaData.addValue(Key_F2, "F2");
        metaData.addValue(Key_F3, "F3");
        metaData.addValue(Key_F4, "F4");
        metaData.addValue(Key_F5, "F5");
        metaData.addValue(Key_F6, "F6");
        metaData.addValue(Key_F7, "F7");
        metaData.addValue(Key_F8, "F8");
        metaData.addValue(Key_F9, "F9");
        metaData.addValue(Key_F10, "F10");
        metaData.addValue(Key_F11, "F11");
        metaData.addValue(Key_F12, "F12");
        metaData.addValue(Key_LeftCtrl, "LeftCtrl");
        metaData.addValue(Key_LeftShift, "LeftShift");
        metaData.addValue(Key_LeftAlt, "LeftAlt");
    }
    {
        Type& type = Type::create<KeyboardEventType>(Kind_Enum, "KeyboardEventType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(KeyboardEventType_KeyDown, "KeyDown");
        metaData.addValue(KeyboardEventType_KeyUp, "KeyUp");
    }
    {
        Type& type = Type::create<MouseButton>(Kind_Enum, "MouseButton");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(MouseButton_Left, "Left");
        metaData.addValue(MouseButton_Right, "Right");
        metaData.addValue(MouseButton_Middle, "Middle");
    }
    {
        Type& type = Type::create<MouseMode>(Kind_Enum, "MouseMode");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(MouseMode_Cursor, "Cursor");
        metaData.addValue(MouseMode_Relative, "Relative");
    }
    {
        Type& type = Type::create<MouseEventType>(Kind_Enum, "MouseEventType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(MouseEventType_Movement, "Movement");
        metaData.addValue(MouseEventType_ButtonDown, "ButtonDown");
        metaData.addValue(MouseEventType_ButtonUp, "ButtonUp");
        metaData.addValue(MouseEventType_ScrollDown, "ScrollDown");
        metaData.addValue(MouseEventType_ScrollUp, "ScrollUp");
    }
    {
        Type& type = Type::create<JsonValueType>(Kind_Enum, "JsonValueType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(JsonValueType_Null, "Null");
        metaData.addValue(JsonValueType_Bool, "Bool");
        metaData.addValue(JsonValueType_Number, "Number");
        metaData.addValue(JsonValueType_String, "String");
        metaData.addValue(JsonValueType_Array, "Array");
        metaData.addValue(JsonValueType_Object, "Object");
    }
    {
        Type& type = Type::create<ComponentEventType>(Kind_Enum, "ComponentEventType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(ComponentEventType_Add, "Add");
        metaData.addValue(ComponentEventType_Remove, "Remove");
    }
    {
        Type& type = Type::create<EntityEventType>(Kind_Enum, "EntityEventType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(EntityEventType_Create, "Create");
        metaData.addValue(EntityEventType_Activate, "Activate");
        metaData.addValue(EntityEventType_Destroy, "Destroy");
    }
    {
        Type& type = Type::create<PacketFlag>(Kind_Enum, "PacketFlag");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PacketFlag_Reliable, "Reliable");
        metaData.addValue(PacketFlag_Unsequenced, "Unsequenced");
    }
    {
        Type& type = Type::create<PeerState>(Kind_Enum, "PeerState");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PeerState_Disconnected, "Disconnected");
        metaData.addValue(PeerState_Connecting, "Connecting");
        metaData.addValue(PeerState_AcknowledgingConnect, "AcknowledgingConnect");
        metaData.addValue(PeerState_ConnectionPending, "ConnectionPending");
        metaData.addValue(PeerState_ConnectionSucceeded, "ConnectionSucceeded");
        metaData.addValue(PeerState_Connected, "Connected");
        metaData.addValue(PeerState_DisconnectLater, "DisconnectLater");
        metaData.addValue(PeerState_Disconnecting, "Disconnecting");
        metaData.addValue(PeerState_AcknowledgeDisconnect, "AcknowledgeDisconnect");
        metaData.addValue(PeerState_Unknown, "Unknown");
    }
    {
        Type& type = Type::create<SocketEventType>(Kind_Enum, "SocketEventType");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(SocketEventType_None, "None");
        metaData.addValue(SocketEventType_Connect, "Connect");
        metaData.addValue(SocketEventType_Disconnect, "Disconnect");
        metaData.addValue(SocketEventType_Receive, "Receive");
    }
    {
        Type& type = Type::create<FrustumTestResult>(Kind_Enum, "FrustumTestResult");
        EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(FrustumTestResult_Outside, "Outside");
        metaData.addValue(FrustumTestResult_Inside, "Inside");
        metaData.addValue(FrustumTestResult_Intersect, "Intersect");
    }
}
