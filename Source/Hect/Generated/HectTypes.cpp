// Generated by reflect.py
#include <Hect/Reflection/Type.h>

#include "..\Concurrency\Task.h"
#include "..\Concurrency\TaskPool.h"
#include "..\Core\Any.h"
#include "..\Core\Error.h"
#include "..\Core\Logging.h"
#include "..\Core\Sequence.h"
#include "..\Core\Uncopyable.h"
#include "..\Debug\BoundingBoxDebugRenderLayer.h"
#include "..\Debug\DebugRenderLayer.h"
#include "..\Debug\Systems\DebugRenderSystem.h"
#include "..\Debug\TransformDebugRenderLayer.h"
#include "..\Event\Dispatcher.h"
#include "..\Event\Listener.h"
#include "..\Graphics\Components\Camera.h"
#include "..\Graphics\Components\DirectionalLight.h"
#include "..\Graphics\Components\LightProbe.h"
#include "..\Graphics\Components\Model.h"
#include "..\Graphics\Components\SkyBox.h"
#include "..\Graphics\FrameBuffer.h"
#include "..\Graphics\Image.h"
#include "..\Graphics\Material.h"
#include "..\Graphics\Mesh.h"
#include "..\Graphics\MeshReader.h"
#include "..\Graphics\MeshWriter.h"
#include "..\Graphics\Pass.h"
#include "..\Graphics\PassUniformValue.h"
#include "..\Graphics\RenderState.h"
#include "..\Graphics\RenderTarget.h"
#include "..\Graphics\Renderer.h"
#include "..\Graphics\RendererObject.h"
#include "..\Graphics\Shader.h"
#include "..\Graphics\ShaderModule.h"
#include "..\Graphics\Systems\PhysicallyBasedRenderSystem.h"
#include "..\Graphics\Systems\RenderSystem.h"
#include "..\Graphics\Technique.h"
#include "..\Graphics\Texture.h"
#include "..\Graphics\Uniform.h"
#include "..\Graphics\UniformValue.h"
#include "..\Graphics\VertexAttribute.h"
#include "..\Graphics\VertexLayout.h"
#include "..\Graphics\VideoMode.h"
#include "..\Graphics\Window.h"
#include "..\IO\AssetCache.h"
#include "..\IO\AssetEntry.h"
#include "..\IO\AssetHandle.h"
#include "..\IO\AssetLoader.h"
#include "..\IO\BinaryDecoder.h"
#include "..\IO\BinaryEncoder.h"
#include "..\IO\Decoder.h"
#include "..\IO\Encodable.h"
#include "..\IO\Encoder.h"
#include "..\IO\Encoders\ImagePngEncoder.h"
#include "..\IO\Encoders\InputAxisEncoder.h"
#include "..\IO\Encoders\MaterialEncoder.h"
#include "..\IO\Encoders\MeshEncoder.h"
#include "..\IO\Encoders\ShaderEncoder.h"
#include "..\IO\Encoders\TextureEncoder.h"
#include "..\IO\Encoders\UniformEncoder.h"
#include "..\IO\Encoders\UniformValueEncoder.h"
#include "..\IO\Encoders\VertexLayoutEncoder.h"
#include "..\IO\FileReadStream.h"
#include "..\IO\FileSystem.h"
#include "..\IO\FileWriteStream.h"
#include "..\IO\JsonDecoder.h"
#include "..\IO\JsonEncoder.h"
#include "..\IO\JsonValue.h"
#include "..\IO\MemoryReadStream.h"
#include "..\IO\MemoryWriteStream.h"
#include "..\IO\Path.h"
#include "..\IO\ReadStream.h"
#include "..\IO\WriteStream.h"
#include "..\Input\InputAxis.h"
#include "..\Input\InputSystem.h"
#include "..\Input\Keyboard.h"
#include "..\Input\Mouse.h"
#include "..\Logic\Component.h"
#include "..\Logic\ComponentEvent.h"
#include "..\Logic\ComponentPool.h"
#include "..\Logic\Entity.h"
#include "..\Logic\EntityEvent.h"
#include "..\Logic\EntityPool.h"
#include "..\Logic\IdPool.h"
#include "..\Logic\Loop.h"
#include "..\Logic\Scene.h"
#include "..\Logic\System.h"
#include "..\Math\Angle.h"
#include "..\Math\Matrix4.h"
#include "..\Math\Quaternion.h"
#include "..\Math\Vector2.h"
#include "..\Math\Vector3.h"
#include "..\Math\Vector4.h"
#include "..\Network\IpAddress.h"
#include "..\Network\Packet.h"
#include "..\Network\PeerHandle.h"
#include "..\Network\Socket.h"
#include "..\Noise\Random.h"
#include "..\Physics\Components\RigidBody.h"
#include "..\Physics\Systems\PhysicsSystem.h"
#include "..\Reflection\Enum.h"
#include "..\Reflection\EnumMetaData.h"
#include "..\Reflection\Type.h"
#include "..\Spacial\AxisAlignedBox.h"
#include "..\Spacial\Box.h"
#include "..\Spacial\Components\BoundingBox.h"
#include "..\Spacial\Components\Transform.h"
#include "..\Spacial\Frustum.h"
#include "..\Spacial\Plane.h"
#include "..\Spacial\Sphere.h"
#include "..\Spacial\Systems\BoundingBoxSystem.h"
#include "..\Spacial\Systems\TransformSystem.h"
#include "..\Timing\TimeSpan.h"
#include "..\Timing\Timer.h"

class HectTypes { };

template <>
void hect::Type::registerTypes<HectTypes>()
{
    {
        hect::Type& type = hect::Type::create<hect::Angle>(hect::Kind_Class, "hect::Angle");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Any>(hect::Kind_Class, "hect::Any");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ArrayDecoder>(hect::Kind_Class, "hect::ArrayDecoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ArrayEncoder>(hect::Kind_Class, "hect::ArrayEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::AssetCache>(hect::Kind_Class, "hect::AssetCache");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::AssetEntryBase>(hect::Kind_Class, "hect::AssetEntryBase");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::AxisAlignedBox>(hect::Kind_Class, "hect::AxisAlignedBox");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::BinaryDecoder>(hect::Kind_Class, "hect::BinaryDecoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::BinaryEncoder>(hect::Kind_Class, "hect::BinaryEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::BoundingBox>(hect::Kind_Class, "hect::BoundingBox");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::BoundingBoxDebugRenderLayer>(hect::Kind_Class, "hect::BoundingBoxDebugRenderLayer");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::BoundingBoxSystem>(hect::Kind_Class, "hect::BoundingBoxSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Box>(hect::Kind_Class, "hect::Box");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Camera>(hect::Kind_Class, "hect::Camera");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ComponentBase>(hect::Kind_Class, "hect::ComponentBase");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ComponentPoolBase>(hect::Kind_Class, "hect::ComponentPoolBase");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::DebugRenderLayer>(hect::Kind_Class, "hect::DebugRenderLayer");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::DebugRenderSystem>(hect::Kind_Class, "hect::DebugRenderSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Decoder>(hect::Kind_Class, "hect::Decoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::DirectionalLight>(hect::Kind_Class, "hect::DirectionalLight");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Encodable>(hect::Kind_Class, "hect::Encodable");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Encoder>(hect::Kind_Class, "hect::Encoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Entity>(hect::Kind_Class, "hect::Entity");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::EntityEvent>(hect::Kind_Class, "hect::EntityEvent");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::EntityPool>(hect::Kind_Class, "hect::EntityPool");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Enum>(hect::Kind_Class, "hect::Enum");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::EnumMetaData>(hect::Kind_Class, "hect::EnumMetaData");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::EnumValue>(hect::Kind_Class, "hect::EnumValue");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Error>(hect::Kind_Class, "hect::Error");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::FileReadStream>(hect::Kind_Class, "hect::FileReadStream");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::FileSystem>(hect::Kind_Class, "hect::FileSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::FileWriteStream>(hect::Kind_Class, "hect::FileWriteStream");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::FrameBuffer>(hect::Kind_Class, "hect::FrameBuffer");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Frustum>(hect::Kind_Class, "hect::Frustum");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Image>(hect::Kind_Class, "hect::Image");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ImagePngEncoder>(hect::Kind_Class, "hect::ImagePngEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::InputAxis>(hect::Kind_Class, "hect::InputAxis");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::InputAxisEncoder>(hect::Kind_Class, "hect::InputAxisEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::InputSystem>(hect::Kind_Class, "hect::InputSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::IpAddress>(hect::Kind_Class, "hect::IpAddress");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::JsonDecoder>(hect::Kind_Class, "hect::JsonDecoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::JsonEncoder>(hect::Kind_Class, "hect::JsonEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::JsonValue>(hect::Kind_Class, "hect::JsonValue");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Keyboard>(hect::Kind_Class, "hect::Keyboard");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::KeyboardEvent>(hect::Kind_Class, "hect::KeyboardEvent");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::LightProbe>(hect::Kind_Class, "hect::LightProbe");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Loop>(hect::Kind_Class, "hect::Loop");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Material>(hect::Kind_Class, "hect::Material");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::MaterialEncoder>(hect::Kind_Class, "hect::MaterialEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::MemoryReadStream>(hect::Kind_Class, "hect::MemoryReadStream");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::MemoryWriteStream>(hect::Kind_Class, "hect::MemoryWriteStream");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Mesh>(hect::Kind_Class, "hect::Mesh");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::MeshEncoder>(hect::Kind_Class, "hect::MeshEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::MeshReader>(hect::Kind_Class, "hect::MeshReader");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::MeshWriter>(hect::Kind_Class, "hect::MeshWriter");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Model>(hect::Kind_Class, "hect::Model");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ModelSurface>(hect::Kind_Class, "hect::ModelSurface");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Mouse>(hect::Kind_Class, "hect::Mouse");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::MouseEvent>(hect::Kind_Class, "hect::MouseEvent");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ObjectDecoder>(hect::Kind_Class, "hect::ObjectDecoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ObjectEncoder>(hect::Kind_Class, "hect::ObjectEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Packet>(hect::Kind_Class, "hect::Packet");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Pass>(hect::Kind_Class, "hect::Pass");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::PassUniformValue>(hect::Kind_Class, "hect::PassUniformValue");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Path>(hect::Kind_Class, "hect::Path");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::PeerHandle>(hect::Kind_Class, "hect::PeerHandle");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::PhysicallyBasedRenderSystem>(hect::Kind_Class, "hect::PhysicallyBasedRenderSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::PhysicsSystem>(hect::Kind_Class, "hect::PhysicsSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Plane>(hect::Kind_Class, "hect::Plane");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Random>(hect::Kind_Class, "hect::Random");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ReadStream>(hect::Kind_Class, "hect::ReadStream");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Renderer>(hect::Kind_Class, "hect::Renderer");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::RendererObject>(hect::Kind_Class, "hect::RendererObject");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::RenderState>(hect::Kind_Class, "hect::RenderState");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::RenderSystem>(hect::Kind_Class, "hect::RenderSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::RenderTarget>(hect::Kind_Class, "hect::RenderTarget");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::RigidBody>(hect::Kind_Class, "hect::RigidBody");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Scene>(hect::Kind_Class, "hect::Scene");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Shader>(hect::Kind_Class, "hect::Shader");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ShaderEncoder>(hect::Kind_Class, "hect::ShaderEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::ShaderModule>(hect::Kind_Class, "hect::ShaderModule");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::SkyBox>(hect::Kind_Class, "hect::SkyBox");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Socket>(hect::Kind_Class, "hect::Socket");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::SocketEvent>(hect::Kind_Class, "hect::SocketEvent");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Sphere>(hect::Kind_Class, "hect::Sphere");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::System>(hect::Kind_Class, "hect::System");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Task>(hect::Kind_Class, "hect::Task");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::TaskPool>(hect::Kind_Class, "hect::TaskPool");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Technique>(hect::Kind_Class, "hect::Technique");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Texture>(hect::Kind_Class, "hect::Texture");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::TextureEncoder>(hect::Kind_Class, "hect::TextureEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Timer>(hect::Kind_Class, "hect::Timer");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::TimeSpan>(hect::Kind_Class, "hect::TimeSpan");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Transform>(hect::Kind_Class, "hect::Transform");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::TransformDebugRenderLayer>(hect::Kind_Class, "hect::TransformDebugRenderLayer");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::TransformSystem>(hect::Kind_Class, "hect::TransformSystem");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Type>(hect::Kind_Class, "hect::Type");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Uncopyable>(hect::Kind_Class, "hect::Uncopyable");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Uniform>(hect::Kind_Class, "hect::Uniform");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::UniformEncoder>(hect::Kind_Class, "hect::UniformEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::UniformValue>(hect::Kind_Class, "hect::UniformValue");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::UniformValueEncoder>(hect::Kind_Class, "hect::UniformValueEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::VertexAttribute>(hect::Kind_Class, "hect::VertexAttribute");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::VertexLayout>(hect::Kind_Class, "hect::VertexLayout");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::VertexLayoutEncoder>(hect::Kind_Class, "hect::VertexLayoutEncoder");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::VideoMode>(hect::Kind_Class, "hect::VideoMode");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::Window>(hect::Kind_Class, "hect::Window");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::WriteStream>(hect::Kind_Class, "hect::WriteStream");
        type;
    }
    {
        hect::Type& type = hect::Type::create<hect::LogLevel>(hect::Kind_Enum, "hect::LogLevel");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(LogLevel_Info, "Info");
        metaData.addValue(LogLevel_Debug, "Debug");
        metaData.addValue(LogLevel_Warning, "Warning");
        metaData.addValue(LogLevel_Error, "Error");
        metaData.addValue(LogLevel_Trace, "Trace");
    }
    {
        hect::Type& type = hect::Type::create<hect::ColorSpace>(hect::Kind_Enum, "hect::ColorSpace");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(ColorSpace_NonLinear, "NonLinear");
        metaData.addValue(ColorSpace_Linear, "Linear");
    }
    {
        hect::Type& type = hect::Type::create<hect::PixelType>(hect::Kind_Enum, "hect::PixelType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PixelType_Half, "Half");
        metaData.addValue(PixelType_Float, "Float");
        metaData.addValue(PixelType_Byte, "Byte");
    }
    {
        hect::Type& type = hect::Type::create<hect::PixelFormat>(hect::Kind_Enum, "hect::PixelFormat");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PixelFormat_Rgb, "Rgb");
        metaData.addValue(PixelFormat_Rgba, "Rgba");
    }
    {
        hect::Type& type = hect::Type::create<hect::PrimitiveType>(hect::Kind_Enum, "hect::PrimitiveType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PrimitiveType_Triangles, "Triangles");
        metaData.addValue(PrimitiveType_TriangleStrip, "TriangleStrip");
        metaData.addValue(PrimitiveType_Lines, "Lines");
        metaData.addValue(PrimitiveType_LineStrip, "LineStrip");
        metaData.addValue(PrimitiveType_Points, "Points");
    }
    {
        hect::Type& type = hect::Type::create<hect::IndexType>(hect::Kind_Enum, "hect::IndexType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(IndexType_UnsignedByte, "UnsignedByte");
        metaData.addValue(IndexType_UnsignedShort, "UnsignedShort");
        metaData.addValue(IndexType_UnsignedInt, "UnsignedInt");
    }
    {
        hect::Type& type = hect::Type::create<hect::BlendFactor>(hect::Kind_Enum, "hect::BlendFactor");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(BlendFactor_Zero, "Zero");
        metaData.addValue(BlendFactor_One, "One");
        metaData.addValue(BlendFactor_SourceColor, "SourceColor");
        metaData.addValue(BlendFactor_OneMinusSourceColor, "OneMinusSourceColor");
        metaData.addValue(BlendFactor_DestColor, "DestColor");
        metaData.addValue(BlendFactor_OneMinusDestColor, "OneMinusDestColor");
        metaData.addValue(BlendFactor_SourceAlpha, "SourceAlpha");
        metaData.addValue(BlendFactor_OneMinusSourceAlpha, "OneMinusSourceAlpha");
        metaData.addValue(BlendFactor_DestAlpha, "DestAlpha");
        metaData.addValue(BlendFactor_OneMinusDestAlpha, "OneMinusDestAlpha");
    }
    {
        hect::Type& type = hect::Type::create<hect::RenderStateFlag>(hect::Kind_Enum, "hect::RenderStateFlag");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(RenderStateFlag_Blend, "Blend");
        metaData.addValue(RenderStateFlag_DepthTest, "DepthTest");
        metaData.addValue(RenderStateFlag_DepthWrite, "DepthWrite");
        metaData.addValue(RenderStateFlag_CullFace, "CullFace");
    }
    {
        hect::Type& type = hect::Type::create<hect::ShaderModuleType>(hect::Kind_Enum, "hect::ShaderModuleType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(ShaderModuleType_Vertex, "Vertex");
        metaData.addValue(ShaderModuleType_Pixel, "Pixel");
        metaData.addValue(ShaderModuleType_Geometry, "Geometry");
    }
    {
        hect::Type& type = hect::Type::create<hect::TextureFilter>(hect::Kind_Enum, "hect::TextureFilter");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(TextureFilter_Nearest, "Nearest");
        metaData.addValue(TextureFilter_Linear, "Linear");
    }
    {
        hect::Type& type = hect::Type::create<hect::TextureType>(hect::Kind_Enum, "hect::TextureType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(TextureType_2D, "2D");
        metaData.addValue(TextureType_CubeMap, "CubeMap");
    }
    {
        hect::Type& type = hect::Type::create<hect::UniformBinding>(hect::Kind_Enum, "hect::UniformBinding");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(UniformBinding_None, "None");
        metaData.addValue(UniformBinding_RenderTargetSize, "RenderTargetSize");
        metaData.addValue(UniformBinding_CameraPosition, "CameraPosition");
        metaData.addValue(UniformBinding_CameraFront, "CameraFront");
        metaData.addValue(UniformBinding_CameraUp, "CameraUp");
        metaData.addValue(UniformBinding_ViewMatrix, "ViewMatrix");
        metaData.addValue(UniformBinding_ProjectionMatrix, "ProjectionMatrix");
        metaData.addValue(UniformBinding_ViewProjectionMatrix, "ViewProjectionMatrix");
        metaData.addValue(UniformBinding_ModelMatrix, "ModelMatrix");
        metaData.addValue(UniformBinding_ModelViewMatrix, "ModelViewMatrix");
        metaData.addValue(UniformBinding_ModelViewProjectionMatrix, "ModelViewProjectionMatrix");
    }
    {
        hect::Type& type = hect::Type::create<hect::UniformType>(hect::Kind_Enum, "hect::UniformType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(UniformType_Int, "Int");
        metaData.addValue(UniformType_Float, "Float");
        metaData.addValue(UniformType_Vector2, "Vector2");
        metaData.addValue(UniformType_Vector3, "Vector3");
        metaData.addValue(UniformType_Vector4, "Vector4");
        metaData.addValue(UniformType_Matrix4, "Matrix4");
        metaData.addValue(UniformType_Texture, "Texture");
    }
    {
        hect::Type& type = hect::Type::create<hect::VertexAttributeSemantic>(hect::Kind_Enum, "hect::VertexAttributeSemantic");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(VertexAttributeSemantic_Position, "Position");
        metaData.addValue(VertexAttributeSemantic_Normal, "Normal");
        metaData.addValue(VertexAttributeSemantic_Color, "Color");
        metaData.addValue(VertexAttributeSemantic_Tangent, "Tangent");
        metaData.addValue(VertexAttributeSemantic_Binormal, "Binormal");
        metaData.addValue(VertexAttributeSemantic_Weight0, "Weight0");
        metaData.addValue(VertexAttributeSemantic_Weight1, "Weight1");
        metaData.addValue(VertexAttributeSemantic_Weight2, "Weight2");
        metaData.addValue(VertexAttributeSemantic_Weight3, "Weight3");
        metaData.addValue(VertexAttributeSemantic_TextureCoords0, "TextureCoords0");
        metaData.addValue(VertexAttributeSemantic_TextureCoords1, "TextureCoords1");
        metaData.addValue(VertexAttributeSemantic_TextureCoords2, "TextureCoords2");
        metaData.addValue(VertexAttributeSemantic_TextureCoords3, "TextureCoords3");
    }
    {
        hect::Type& type = hect::Type::create<hect::VertexAttributeType>(hect::Kind_Enum, "hect::VertexAttributeType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(VertexAttributeType_Byte, "Byte");
        metaData.addValue(VertexAttributeType_UnsignedByte, "UnsignedByte");
        metaData.addValue(VertexAttributeType_Short, "Short");
        metaData.addValue(VertexAttributeType_UnsignedShort, "UnsignedShort");
        metaData.addValue(VertexAttributeType_Int, "Int");
        metaData.addValue(VertexAttributeType_UnsignedInt, "UnsignedInt");
        metaData.addValue(VertexAttributeType_Half, "Half");
        metaData.addValue(VertexAttributeType_Float, "Float");
    }
    {
        hect::Type& type = hect::Type::create<hect::InputAxisSource>(hect::Kind_Enum, "hect::InputAxisSource");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(InputAxisSource_MouseMoveX, "MouseMoveX");
        metaData.addValue(InputAxisSource_MouseMoveY, "MouseMoveY");
        metaData.addValue(InputAxisSource_MouseButton, "MouseButton");
        metaData.addValue(InputAxisSource_MouseScroll, "MouseScroll");
        metaData.addValue(InputAxisSource_Key, "Key");
    }
    {
        hect::Type& type = hect::Type::create<hect::Key>(hect::Kind_Enum, "hect::Key");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(Key_Unknown, "Unknown");
        metaData.addValue(Key_A, "A");
        metaData.addValue(Key_B, "B");
        metaData.addValue(Key_C, "C");
        metaData.addValue(Key_D, "D");
        metaData.addValue(Key_E, "E");
        metaData.addValue(Key_F, "F");
        metaData.addValue(Key_G, "G");
        metaData.addValue(Key_H, "H");
        metaData.addValue(Key_I, "I");
        metaData.addValue(Key_J, "J");
        metaData.addValue(Key_K, "K");
        metaData.addValue(Key_L, "L");
        metaData.addValue(Key_M, "M");
        metaData.addValue(Key_N, "N");
        metaData.addValue(Key_O, "O");
        metaData.addValue(Key_P, "P");
        metaData.addValue(Key_Q, "Q");
        metaData.addValue(Key_R, "R");
        metaData.addValue(Key_S, "S");
        metaData.addValue(Key_T, "T");
        metaData.addValue(Key_U, "U");
        metaData.addValue(Key_V, "V");
        metaData.addValue(Key_W, "W");
        metaData.addValue(Key_X, "X");
        metaData.addValue(Key_Y, "Y");
        metaData.addValue(Key_Z, "Z");
        metaData.addValue(Key_Num0, "Num0");
        metaData.addValue(Key_Num1, "Num1");
        metaData.addValue(Key_Num2, "Num2");
        metaData.addValue(Key_Num3, "Num3");
        metaData.addValue(Key_Num4, "Num4");
        metaData.addValue(Key_Num5, "Num5");
        metaData.addValue(Key_Num6, "Num6");
        metaData.addValue(Key_Num7, "Num7");
        metaData.addValue(Key_Num8, "Num8");
        metaData.addValue(Key_Num9, "Num9");
        metaData.addValue(Key_Esc, "Esc");
        metaData.addValue(Key_Space, "Space");
        metaData.addValue(Key_Enter, "Enter");
        metaData.addValue(Key_Backspace, "Backspace");
        metaData.addValue(Key_Tab, "Tab");
        metaData.addValue(Key_Tick, "Tick");
        metaData.addValue(Key_F1, "F1");
        metaData.addValue(Key_F2, "F2");
        metaData.addValue(Key_F3, "F3");
        metaData.addValue(Key_F4, "F4");
        metaData.addValue(Key_F5, "F5");
        metaData.addValue(Key_F6, "F6");
        metaData.addValue(Key_F7, "F7");
        metaData.addValue(Key_F8, "F8");
        metaData.addValue(Key_F9, "F9");
        metaData.addValue(Key_F10, "F10");
        metaData.addValue(Key_F11, "F11");
        metaData.addValue(Key_F12, "F12");
        metaData.addValue(Key_LeftCtrl, "LeftCtrl");
        metaData.addValue(Key_LeftShift, "LeftShift");
        metaData.addValue(Key_LeftAlt, "LeftAlt");
    }
    {
        hect::Type& type = hect::Type::create<hect::KeyboardEventType>(hect::Kind_Enum, "hect::KeyboardEventType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(KeyboardEventType_KeyDown, "KeyDown");
        metaData.addValue(KeyboardEventType_KeyUp, "KeyUp");
    }
    {
        hect::Type& type = hect::Type::create<hect::MouseButton>(hect::Kind_Enum, "hect::MouseButton");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(MouseButton_Left, "Left");
        metaData.addValue(MouseButton_Right, "Right");
        metaData.addValue(MouseButton_Middle, "Middle");
    }
    {
        hect::Type& type = hect::Type::create<hect::MouseMode>(hect::Kind_Enum, "hect::MouseMode");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(MouseMode_Cursor, "Cursor");
        metaData.addValue(MouseMode_Relative, "Relative");
    }
    {
        hect::Type& type = hect::Type::create<hect::MouseEventType>(hect::Kind_Enum, "hect::MouseEventType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(MouseEventType_Movement, "Movement");
        metaData.addValue(MouseEventType_ButtonDown, "ButtonDown");
        metaData.addValue(MouseEventType_ButtonUp, "ButtonUp");
        metaData.addValue(MouseEventType_ScrollDown, "ScrollDown");
        metaData.addValue(MouseEventType_ScrollUp, "ScrollUp");
    }
    {
        hect::Type& type = hect::Type::create<hect::JsonValueType>(hect::Kind_Enum, "hect::JsonValueType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(JsonValueType_Null, "Null");
        metaData.addValue(JsonValueType_Bool, "Bool");
        metaData.addValue(JsonValueType_Number, "Number");
        metaData.addValue(JsonValueType_String, "String");
        metaData.addValue(JsonValueType_Array, "Array");
        metaData.addValue(JsonValueType_Object, "Object");
    }
    {
        hect::Type& type = hect::Type::create<hect::ComponentEventType>(hect::Kind_Enum, "hect::ComponentEventType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(ComponentEventType_Add, "Add");
        metaData.addValue(ComponentEventType_Remove, "Remove");
    }
    {
        hect::Type& type = hect::Type::create<hect::EntityEventType>(hect::Kind_Enum, "hect::EntityEventType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(EntityEventType_Create, "Create");
        metaData.addValue(EntityEventType_Activate, "Activate");
        metaData.addValue(EntityEventType_Destroy, "Destroy");
    }
    {
        hect::Type& type = hect::Type::create<hect::PacketFlag>(hect::Kind_Enum, "hect::PacketFlag");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PacketFlag_Reliable, "Reliable");
        metaData.addValue(PacketFlag_Unsequenced, "Unsequenced");
    }
    {
        hect::Type& type = hect::Type::create<hect::PeerState>(hect::Kind_Enum, "hect::PeerState");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(PeerState_Disconnected, "Disconnected");
        metaData.addValue(PeerState_Connecting, "Connecting");
        metaData.addValue(PeerState_AcknowledgingConnect, "AcknowledgingConnect");
        metaData.addValue(PeerState_ConnectionPending, "ConnectionPending");
        metaData.addValue(PeerState_ConnectionSucceeded, "ConnectionSucceeded");
        metaData.addValue(PeerState_Connected, "Connected");
        metaData.addValue(PeerState_DisconnectLater, "DisconnectLater");
        metaData.addValue(PeerState_Disconnecting, "Disconnecting");
        metaData.addValue(PeerState_AcknowledgeDisconnect, "AcknowledgeDisconnect");
        metaData.addValue(PeerState_Unknown, "Unknown");
    }
    {
        hect::Type& type = hect::Type::create<hect::SocketEventType>(hect::Kind_Enum, "hect::SocketEventType");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(SocketEventType_None, "None");
        metaData.addValue(SocketEventType_Connect, "Connect");
        metaData.addValue(SocketEventType_Disconnect, "Disconnect");
        metaData.addValue(SocketEventType_Receive, "Receive");
    }
    {
        hect::Type& type = hect::Type::create<hect::Kind>(hect::Kind_Enum, "hect::Kind");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(Kind_None, "None");
        metaData.addValue(Kind_Namespace, "Namespace");
        metaData.addValue(Kind_Class, "Class");
        metaData.addValue(Kind_Enum, "Enum");
    }
    {
        hect::Type& type = hect::Type::create<hect::FrustumTestResult>(hect::Kind_Enum, "hect::FrustumTestResult");
        hect::EnumMetaData& metaData = type.enumMetaData();
        metaData.addValue(FrustumTestResult_Outside, "Outside");
        metaData.addValue(FrustumTestResult_Inside, "Inside");
        metaData.addValue(FrustumTestResult_Intersect, "Intersect");
    }
}
