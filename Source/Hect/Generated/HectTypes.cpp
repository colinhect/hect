// Generated by reflect.py
#include <Hect/Reflection/Type.h>

#include "..\Core\Logging.h"
#include "..\Graphics\Image.h"
#include "..\Graphics\Mesh.h"
#include "..\Graphics\RenderState.h"
#include "..\Graphics\ShaderModule.h"
#include "..\Graphics\Texture.h"
#include "..\Graphics\Uniform.h"
#include "..\Graphics\UniformValue.h"
#include "..\Graphics\VertexAttribute.h"
#include "..\IO\JsonValue.h"
#include "..\Input\Gamepad.h"
#include "..\Input\InputAxisSource.h"
#include "..\Input\Keyboard.h"
#include "..\Input\Mouse.h"
#include "..\Logic\ComponentEvent.h"
#include "..\Logic\EntityEvent.h"
#include "..\Network\Packet.h"
#include "..\Network\PeerHandle.h"
#include "..\Network\Socket.h"
#include "..\Reflection\Type.h"
#include "..\Spacial\Frustum.h"

class HectTypes { };

template <>
void hect::Type::registerTypes<HectTypes>()
{
    {
        hect::Type& type = hect::Type::create<LogLevel>(hect::Kind_Enum, "LogLevel");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(LogLevel_Info, "Info");
        enumType.addValue(LogLevel_Debug, "Debug");
        enumType.addValue(LogLevel_Warning, "Warning");
        enumType.addValue(LogLevel_Error, "Error");
        enumType.addValue(LogLevel_Trace, "Trace");
    }
    {
        hect::Type& type = hect::Type::create<ColorSpace>(hect::Kind_Enum, "ColorSpace");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(ColorSpace_NonLinear, "NonLinear");
        enumType.addValue(ColorSpace_Linear, "Linear");
    }
    {
        hect::Type& type = hect::Type::create<PixelType>(hect::Kind_Enum, "PixelType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(PixelType_Half, "Half");
        enumType.addValue(PixelType_Float, "Float");
        enumType.addValue(PixelType_Byte, "Byte");
    }
    {
        hect::Type& type = hect::Type::create<PixelFormat>(hect::Kind_Enum, "PixelFormat");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(PixelFormat_Rgb, "Rgb");
        enumType.addValue(PixelFormat_Rgba, "Rgba");
    }
    {
        hect::Type& type = hect::Type::create<PrimitiveType>(hect::Kind_Enum, "PrimitiveType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(PrimitiveType_Triangles, "Triangles");
        enumType.addValue(PrimitiveType_TriangleStrip, "TriangleStrip");
        enumType.addValue(PrimitiveType_Lines, "Lines");
        enumType.addValue(PrimitiveType_LineStrip, "LineStrip");
        enumType.addValue(PrimitiveType_Points, "Points");
    }
    {
        hect::Type& type = hect::Type::create<IndexType>(hect::Kind_Enum, "IndexType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(IndexType_UnsignedByte, "UnsignedByte");
        enumType.addValue(IndexType_UnsignedShort, "UnsignedShort");
        enumType.addValue(IndexType_UnsignedInt, "UnsignedInt");
    }
    {
        hect::Type& type = hect::Type::create<BlendFactor>(hect::Kind_Enum, "BlendFactor");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(BlendFactor_Zero, "Zero");
        enumType.addValue(BlendFactor_One, "One");
        enumType.addValue(BlendFactor_SourceColor, "SourceColor");
        enumType.addValue(BlendFactor_OneMinusSourceColor, "OneMinusSourceColor");
        enumType.addValue(BlendFactor_DestColor, "DestColor");
        enumType.addValue(BlendFactor_OneMinusDestColor, "OneMinusDestColor");
        enumType.addValue(BlendFactor_SourceAlpha, "SourceAlpha");
        enumType.addValue(BlendFactor_OneMinusSourceAlpha, "OneMinusSourceAlpha");
        enumType.addValue(BlendFactor_DestAlpha, "DestAlpha");
        enumType.addValue(BlendFactor_OneMinusDestAlpha, "OneMinusDestAlpha");
    }
    {
        hect::Type& type = hect::Type::create<RenderStateFlag>(hect::Kind_Enum, "RenderStateFlag");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(RenderStateFlag_Blend, "Blend");
        enumType.addValue(RenderStateFlag_DepthTest, "DepthTest");
        enumType.addValue(RenderStateFlag_DepthWrite, "DepthWrite");
        enumType.addValue(RenderStateFlag_CullFace, "CullFace");
    }
    {
        hect::Type& type = hect::Type::create<ShaderModuleType>(hect::Kind_Enum, "ShaderModuleType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(ShaderModuleType_Vertex, "Vertex");
        enumType.addValue(ShaderModuleType_Pixel, "Pixel");
        enumType.addValue(ShaderModuleType_Geometry, "Geometry");
    }
    {
        hect::Type& type = hect::Type::create<TextureFilter>(hect::Kind_Enum, "TextureFilter");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(TextureFilter_Nearest, "Nearest");
        enumType.addValue(TextureFilter_Linear, "Linear");
    }
    {
        hect::Type& type = hect::Type::create<TextureType>(hect::Kind_Enum, "TextureType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(TextureType_2D, "2D");
        enumType.addValue(TextureType_CubeMap, "CubeMap");
    }
    {
        hect::Type& type = hect::Type::create<UniformBinding>(hect::Kind_Enum, "UniformBinding");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(UniformBinding_None, "None");
        enumType.addValue(UniformBinding_RenderTargetSize, "RenderTargetSize");
        enumType.addValue(UniformBinding_CameraPosition, "CameraPosition");
        enumType.addValue(UniformBinding_CameraFront, "CameraFront");
        enumType.addValue(UniformBinding_CameraUp, "CameraUp");
        enumType.addValue(UniformBinding_ViewMatrix, "ViewMatrix");
        enumType.addValue(UniformBinding_ProjectionMatrix, "ProjectionMatrix");
        enumType.addValue(UniformBinding_ViewProjectionMatrix, "ViewProjectionMatrix");
        enumType.addValue(UniformBinding_ModelMatrix, "ModelMatrix");
        enumType.addValue(UniformBinding_ModelViewMatrix, "ModelViewMatrix");
        enumType.addValue(UniformBinding_ModelViewProjectionMatrix, "ModelViewProjectionMatrix");
    }
    {
        hect::Type& type = hect::Type::create<UniformType>(hect::Kind_Enum, "UniformType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(UniformType_Int, "Int");
        enumType.addValue(UniformType_Float, "Float");
        enumType.addValue(UniformType_Vector2, "Vector2");
        enumType.addValue(UniformType_Vector3, "Vector3");
        enumType.addValue(UniformType_Vector4, "Vector4");
        enumType.addValue(UniformType_Matrix4, "Matrix4");
        enumType.addValue(UniformType_Texture, "Texture");
    }
    {
        hect::Type& type = hect::Type::create<VertexAttributeSemantic>(hect::Kind_Enum, "VertexAttributeSemantic");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(VertexAttributeSemantic_Position, "Position");
        enumType.addValue(VertexAttributeSemantic_Normal, "Normal");
        enumType.addValue(VertexAttributeSemantic_Color, "Color");
        enumType.addValue(VertexAttributeSemantic_Tangent, "Tangent");
        enumType.addValue(VertexAttributeSemantic_Binormal, "Binormal");
        enumType.addValue(VertexAttributeSemantic_Weight0, "Weight0");
        enumType.addValue(VertexAttributeSemantic_Weight1, "Weight1");
        enumType.addValue(VertexAttributeSemantic_Weight2, "Weight2");
        enumType.addValue(VertexAttributeSemantic_Weight3, "Weight3");
        enumType.addValue(VertexAttributeSemantic_TextureCoords0, "TextureCoords0");
        enumType.addValue(VertexAttributeSemantic_TextureCoords1, "TextureCoords1");
        enumType.addValue(VertexAttributeSemantic_TextureCoords2, "TextureCoords2");
        enumType.addValue(VertexAttributeSemantic_TextureCoords3, "TextureCoords3");
    }
    {
        hect::Type& type = hect::Type::create<VertexAttributeType>(hect::Kind_Enum, "VertexAttributeType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(VertexAttributeType_Byte, "Byte");
        enumType.addValue(VertexAttributeType_UnsignedByte, "UnsignedByte");
        enumType.addValue(VertexAttributeType_Short, "Short");
        enumType.addValue(VertexAttributeType_UnsignedShort, "UnsignedShort");
        enumType.addValue(VertexAttributeType_Int, "Int");
        enumType.addValue(VertexAttributeType_UnsignedInt, "UnsignedInt");
        enumType.addValue(VertexAttributeType_Half, "Half");
        enumType.addValue(VertexAttributeType_Float, "Float");
    }
    {
        hect::Type& type = hect::Type::create<GamepadButton>(hect::Kind_Enum, "GamepadButton");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(GamepadButton_Button0, "Button0");
        enumType.addValue(GamepadButton_Button1, "Button1");
        enumType.addValue(GamepadButton_Button2, "Button2");
        enumType.addValue(GamepadButton_Button3, "Button3");
        enumType.addValue(GamepadButton_Button4, "Button4");
        enumType.addValue(GamepadButton_Button5, "Button5");
        enumType.addValue(GamepadButton_Button6, "Button6");
        enumType.addValue(GamepadButton_Button7, "Button7");
        enumType.addValue(GamepadButton_Button8, "Button8");
        enumType.addValue(GamepadButton_Button9, "Button9");
        enumType.addValue(GamepadButton_Button11, "Button11");
        enumType.addValue(GamepadButton_Button12, "Button12");
        enumType.addValue(GamepadButton_Button13, "Button13");
        enumType.addValue(GamepadButton_Button14, "Button14");
        enumType.addValue(GamepadButton_Button15, "Button15");
        enumType.addValue(GamepadButton_Button16, "Button16");
        enumType.addValue(GamepadButton_Button17, "Button17");
        enumType.addValue(GamepadButton_Button18, "Button18");
        enumType.addValue(GamepadButton_Button19, "Button19");
        enumType.addValue(GamepadButton_Button20, "Button20");
        enumType.addValue(GamepadButton_Button21, "Button21");
        enumType.addValue(GamepadButton_Button22, "Button22");
        enumType.addValue(GamepadButton_Button23, "Button23");
        enumType.addValue(GamepadButton_Button24, "Button24");
        enumType.addValue(GamepadButton_Button25, "Button25");
        enumType.addValue(GamepadButton_Button26, "Button26");
        enumType.addValue(GamepadButton_Button27, "Button27");
        enumType.addValue(GamepadButton_Button28, "Button28");
        enumType.addValue(GamepadButton_Button29, "Button29");
        enumType.addValue(GamepadButton_Button30, "Button30");
        enumType.addValue(GamepadButton_Button31, "Button31");
    }
    {
        hect::Type& type = hect::Type::create<GamepadAxis>(hect::Kind_Enum, "GamepadAxis");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(GamepadAxis_Axis0, "Axis0");
        enumType.addValue(GamepadAxis_Axis1, "Axis1");
        enumType.addValue(GamepadAxis_Axis2, "Axis2");
        enumType.addValue(GamepadAxis_Axis3, "Axis3");
        enumType.addValue(GamepadAxis_Axis4, "Axis4");
        enumType.addValue(GamepadAxis_Axis5, "Axis5");
        enumType.addValue(GamepadAxis_Axis6, "Axis6");
        enumType.addValue(GamepadAxis_Axis7, "Axis7");
        enumType.addValue(GamepadAxis_Axis8, "Axis8");
        enumType.addValue(GamepadAxis_Axis9, "Axis9");
        enumType.addValue(GamepadAxis_Axis11, "Axis11");
        enumType.addValue(GamepadAxis_Axis12, "Axis12");
        enumType.addValue(GamepadAxis_Axis13, "Axis13");
        enumType.addValue(GamepadAxis_Axis14, "Axis14");
        enumType.addValue(GamepadAxis_Axis15, "Axis15");
        enumType.addValue(GamepadAxis_Axis16, "Axis16");
        enumType.addValue(GamepadAxis_Axis17, "Axis17");
        enumType.addValue(GamepadAxis_Axis18, "Axis18");
        enumType.addValue(GamepadAxis_Axis19, "Axis19");
        enumType.addValue(GamepadAxis_Axis20, "Axis20");
        enumType.addValue(GamepadAxis_Axis21, "Axis21");
        enumType.addValue(GamepadAxis_Axis22, "Axis22");
        enumType.addValue(GamepadAxis_Axis23, "Axis23");
        enumType.addValue(GamepadAxis_Axis24, "Axis24");
        enumType.addValue(GamepadAxis_Axis25, "Axis25");
        enumType.addValue(GamepadAxis_Axis26, "Axis26");
        enumType.addValue(GamepadAxis_Axis27, "Axis27");
        enumType.addValue(GamepadAxis_Axis28, "Axis28");
        enumType.addValue(GamepadAxis_Axis29, "Axis29");
        enumType.addValue(GamepadAxis_Axis30, "Axis30");
        enumType.addValue(GamepadAxis_Axis31, "Axis31");
    }
    {
        hect::Type& type = hect::Type::create<GamepadEventType>(hect::Kind_Enum, "GamepadEventType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(GamepadEventType_AxisMotion, "AxisMotion");
        enumType.addValue(GamepadEventType_ButtonDown, "ButtonDown");
        enumType.addValue(GamepadEventType_ButtonUp, "ButtonUp");
    }
    {
        hect::Type& type = hect::Type::create<InputAxisSourceType>(hect::Kind_Enum, "InputAxisSourceType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(InputAxisSourceType_MouseMoveX, "MouseMoveX");
        enumType.addValue(InputAxisSourceType_MouseMoveY, "MouseMoveY");
        enumType.addValue(InputAxisSourceType_MouseButton, "MouseButton");
        enumType.addValue(InputAxisSourceType_MouseScroll, "MouseScroll");
        enumType.addValue(InputAxisSourceType_Key, "Key");
        enumType.addValue(InputAxisSourceType_GamepadAxis, "GamepadAxis");
        enumType.addValue(InputAxisSourceType_GamepadButton, "GamepadButton");
    }
    {
        hect::Type& type = hect::Type::create<Key>(hect::Kind_Enum, "Key");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(Key_Unknown, "Unknown");
        enumType.addValue(Key_A, "A");
        enumType.addValue(Key_B, "B");
        enumType.addValue(Key_C, "C");
        enumType.addValue(Key_D, "D");
        enumType.addValue(Key_E, "E");
        enumType.addValue(Key_F, "F");
        enumType.addValue(Key_G, "G");
        enumType.addValue(Key_H, "H");
        enumType.addValue(Key_I, "I");
        enumType.addValue(Key_J, "J");
        enumType.addValue(Key_K, "K");
        enumType.addValue(Key_L, "L");
        enumType.addValue(Key_M, "M");
        enumType.addValue(Key_N, "N");
        enumType.addValue(Key_O, "O");
        enumType.addValue(Key_P, "P");
        enumType.addValue(Key_Q, "Q");
        enumType.addValue(Key_R, "R");
        enumType.addValue(Key_S, "S");
        enumType.addValue(Key_T, "T");
        enumType.addValue(Key_U, "U");
        enumType.addValue(Key_V, "V");
        enumType.addValue(Key_W, "W");
        enumType.addValue(Key_X, "X");
        enumType.addValue(Key_Y, "Y");
        enumType.addValue(Key_Z, "Z");
        enumType.addValue(Key_Num0, "Num0");
        enumType.addValue(Key_Num1, "Num1");
        enumType.addValue(Key_Num2, "Num2");
        enumType.addValue(Key_Num3, "Num3");
        enumType.addValue(Key_Num4, "Num4");
        enumType.addValue(Key_Num5, "Num5");
        enumType.addValue(Key_Num6, "Num6");
        enumType.addValue(Key_Num7, "Num7");
        enumType.addValue(Key_Num8, "Num8");
        enumType.addValue(Key_Num9, "Num9");
        enumType.addValue(Key_Esc, "Esc");
        enumType.addValue(Key_Space, "Space");
        enumType.addValue(Key_Enter, "Enter");
        enumType.addValue(Key_Backspace, "Backspace");
        enumType.addValue(Key_Tab, "Tab");
        enumType.addValue(Key_Tick, "Tick");
        enumType.addValue(Key_F1, "F1");
        enumType.addValue(Key_F2, "F2");
        enumType.addValue(Key_F3, "F3");
        enumType.addValue(Key_F4, "F4");
        enumType.addValue(Key_F5, "F5");
        enumType.addValue(Key_F6, "F6");
        enumType.addValue(Key_F7, "F7");
        enumType.addValue(Key_F8, "F8");
        enumType.addValue(Key_F9, "F9");
        enumType.addValue(Key_F10, "F10");
        enumType.addValue(Key_F11, "F11");
        enumType.addValue(Key_F12, "F12");
        enumType.addValue(Key_LeftCtrl, "LeftCtrl");
        enumType.addValue(Key_LeftShift, "LeftShift");
        enumType.addValue(Key_LeftAlt, "LeftAlt");
    }
    {
        hect::Type& type = hect::Type::create<KeyboardEventType>(hect::Kind_Enum, "KeyboardEventType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(KeyboardEventType_KeyDown, "KeyDown");
        enumType.addValue(KeyboardEventType_KeyUp, "KeyUp");
    }
    {
        hect::Type& type = hect::Type::create<MouseButton>(hect::Kind_Enum, "MouseButton");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(MouseButton_Button0, "Button0");
        enumType.addValue(MouseButton_Button1, "Button1");
        enumType.addValue(MouseButton_Button2, "Button2");
        enumType.addValue(MouseButton_Button3, "Button3");
        enumType.addValue(MouseButton_Button4, "Button4");
        enumType.addValue(MouseButton_Button5, "Button5");
        enumType.addValue(MouseButton_Button6, "Button6");
        enumType.addValue(MouseButton_Button7, "Button7");
    }
    {
        hect::Type& type = hect::Type::create<MouseMode>(hect::Kind_Enum, "MouseMode");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(MouseMode_Cursor, "Cursor");
        enumType.addValue(MouseMode_Relative, "Relative");
    }
    {
        hect::Type& type = hect::Type::create<MouseEventType>(hect::Kind_Enum, "MouseEventType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(MouseEventType_Movement, "Movement");
        enumType.addValue(MouseEventType_ButtonDown, "ButtonDown");
        enumType.addValue(MouseEventType_ButtonUp, "ButtonUp");
        enumType.addValue(MouseEventType_ScrollDown, "ScrollDown");
        enumType.addValue(MouseEventType_ScrollUp, "ScrollUp");
    }
    {
        hect::Type& type = hect::Type::create<JsonValueType>(hect::Kind_Enum, "JsonValueType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(JsonValueType_Null, "Null");
        enumType.addValue(JsonValueType_Bool, "Bool");
        enumType.addValue(JsonValueType_Number, "Number");
        enumType.addValue(JsonValueType_String, "String");
        enumType.addValue(JsonValueType_Array, "Array");
        enumType.addValue(JsonValueType_Object, "Object");
    }
    {
        hect::Type& type = hect::Type::create<ComponentEventType>(hect::Kind_Enum, "ComponentEventType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(ComponentEventType_Add, "Add");
        enumType.addValue(ComponentEventType_Remove, "Remove");
    }
    {
        hect::Type& type = hect::Type::create<EntityEventType>(hect::Kind_Enum, "EntityEventType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(EntityEventType_Create, "Create");
        enumType.addValue(EntityEventType_Activate, "Activate");
        enumType.addValue(EntityEventType_Destroy, "Destroy");
    }
    {
        hect::Type& type = hect::Type::create<PacketFlag>(hect::Kind_Enum, "PacketFlag");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(PacketFlag_Reliable, "Reliable");
        enumType.addValue(PacketFlag_Unsequenced, "Unsequenced");
    }
    {
        hect::Type& type = hect::Type::create<PeerState>(hect::Kind_Enum, "PeerState");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(PeerState_Disconnected, "Disconnected");
        enumType.addValue(PeerState_Connecting, "Connecting");
        enumType.addValue(PeerState_AcknowledgingConnect, "AcknowledgingConnect");
        enumType.addValue(PeerState_ConnectionPending, "ConnectionPending");
        enumType.addValue(PeerState_ConnectionSucceeded, "ConnectionSucceeded");
        enumType.addValue(PeerState_Connected, "Connected");
        enumType.addValue(PeerState_DisconnectLater, "DisconnectLater");
        enumType.addValue(PeerState_Disconnecting, "Disconnecting");
        enumType.addValue(PeerState_AcknowledgeDisconnect, "AcknowledgeDisconnect");
        enumType.addValue(PeerState_Unknown, "Unknown");
    }
    {
        hect::Type& type = hect::Type::create<SocketEventType>(hect::Kind_Enum, "SocketEventType");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(SocketEventType_None, "None");
        enumType.addValue(SocketEventType_Connect, "Connect");
        enumType.addValue(SocketEventType_Disconnect, "Disconnect");
        enumType.addValue(SocketEventType_Receive, "Receive");
    }
    {
        hect::Type& type = hect::Type::create<Kind>(hect::Kind_Enum, "Kind");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(Kind_None, "None");
        enumType.addValue(Kind_Namespace, "Namespace");
        enumType.addValue(Kind_Class, "Class");
        enumType.addValue(Kind_Enum, "Enum");
    }
    {
        hect::Type& type = hect::Type::create<FrustumTestResult>(hect::Kind_Enum, "FrustumTestResult");
        hect::Enum& enumType = type.asEnum();
        enumType.addValue(FrustumTestResult_Outside, "Outside");
        enumType.addValue(FrustumTestResult_Inside, "Inside");
        enumType.addValue(FrustumTestResult_Intersect, "Intersect");
    }
}
