// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Input\Mouse.h"

using namespace hect;

template <>
const std::string& Enum::toString<MouseButton>(MouseButton value)
{
    static std::map<MouseButton, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[MouseButton_Left] = "Left";
        _valueToString[MouseButton_Right] = "Right";
        _valueToString[MouseButton_Middle] = "Middle";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'MouseButton'");
    }
    return it->second;
}

template <>
MouseButton Enum::fromString<MouseButton>(const std::string& string)
{
    static std::map<std::string, MouseButton> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Left"] = MouseButton_Left;
        _stringToValue["Right"] = MouseButton_Right;
        _stringToValue["Middle"] = MouseButton_Middle;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'MouseButton'", string.c_str()));
    }
    return it->second;
}

