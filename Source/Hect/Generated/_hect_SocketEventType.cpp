// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Network\Socket.h"

using namespace hect;

template <>
const std::string& Enum::toString<SocketEventType>(SocketEventType value)
{
    static std::map<SocketEventType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[SocketEventType_None] = "None";
        _valueToString[SocketEventType_Connect] = "Connect";
        _valueToString[SocketEventType_Disconnect] = "Disconnect";
        _valueToString[SocketEventType_Receive] = "Receive";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'SocketEventType'");
    }
    return it->second;
}

template <>
SocketEventType Enum::fromString<SocketEventType>(const std::string& string)
{
    static std::map<std::string, SocketEventType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["None"] = SocketEventType_None;
        _stringToValue["Connect"] = SocketEventType_Connect;
        _stringToValue["Disconnect"] = SocketEventType_Disconnect;
        _stringToValue["Receive"] = SocketEventType_Receive;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'SocketEventType'", string.c_str()));
    }
    return it->second;
}

