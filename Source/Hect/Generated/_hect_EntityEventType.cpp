// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Logic\EntityEvent.h"

using namespace hect;

template <>
const std::string& Enum::toString<EntityEventType>(EntityEventType value)
{
    static std::map<EntityEventType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[EntityEventType_Create] = "Create";
        _valueToString[EntityEventType_Activate] = "Activate";
        _valueToString[EntityEventType_Destroy] = "Destroy";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'EntityEventType'");
    }
    return it->second;
}

template <>
EntityEventType Enum::fromString<EntityEventType>(const std::string& string)
{
    static std::map<std::string, EntityEventType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Create"] = EntityEventType_Create;
        _stringToValue["Activate"] = EntityEventType_Activate;
        _stringToValue["Destroy"] = EntityEventType_Destroy;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'EntityEventType'", string.c_str()));
    }
    return it->second;
}

