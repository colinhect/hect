// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Logic\ComponentEvent.h"

using namespace hect;

template <>
const std::string& Enum::toString<ComponentEventType>(ComponentEventType value)
{
    static std::map<ComponentEventType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[ComponentEventType_Add] = "Add";
        _valueToString[ComponentEventType_Remove] = "Remove";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'ComponentEventType'");
    }
    return it->second;
}

template <>
ComponentEventType Enum::fromString<ComponentEventType>(const std::string& string)
{
    static std::map<std::string, ComponentEventType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Add"] = ComponentEventType_Add;
        _stringToValue["Remove"] = ComponentEventType_Remove;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'ComponentEventType'", string.c_str()));
    }
    return it->second;
}

