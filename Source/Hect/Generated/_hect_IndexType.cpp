// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\Mesh.h"

using namespace hect;

template <>
const std::string& Enum::toString<IndexType>(IndexType value)
{
    static std::map<IndexType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[IndexType_UnsignedByte] = "UnsignedByte";
        _valueToString[IndexType_UnsignedShort] = "UnsignedShort";
        _valueToString[IndexType_UnsignedInt] = "UnsignedInt";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'IndexType'");
    }
    return it->second;
}

template <>
IndexType Enum::fromString<IndexType>(const std::string& string)
{
    static std::map<std::string, IndexType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["UnsignedByte"] = IndexType_UnsignedByte;
        _stringToValue["UnsignedShort"] = IndexType_UnsignedShort;
        _stringToValue["UnsignedInt"] = IndexType_UnsignedInt;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'IndexType'", string.c_str()));
    }
    return it->second;
}

