// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Network\PeerHandle.h"

using namespace hect;

template <>
const std::string& Enum::toString<PeerState>(PeerState value)
{
    static std::map<PeerState, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[PeerState_Disconnected] = "Disconnected";
        _valueToString[PeerState_Connecting] = "Connecting";
        _valueToString[PeerState_AcknowledgingConnect] = "AcknowledgingConnect";
        _valueToString[PeerState_ConnectionPending] = "ConnectionPending";
        _valueToString[PeerState_ConnectionSucceeded] = "ConnectionSucceeded";
        _valueToString[PeerState_Connected] = "Connected";
        _valueToString[PeerState_DisconnectLater] = "DisconnectLater";
        _valueToString[PeerState_Disconnecting] = "Disconnecting";
        _valueToString[PeerState_AcknowledgeDisconnect] = "AcknowledgeDisconnect";
        _valueToString[PeerState_Unknown] = "Unknown";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'PeerState'");
    }
    return it->second;
}

template <>
PeerState Enum::fromString<PeerState>(const std::string& string)
{
    static std::map<std::string, PeerState> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Disconnected"] = PeerState_Disconnected;
        _stringToValue["Connecting"] = PeerState_Connecting;
        _stringToValue["AcknowledgingConnect"] = PeerState_AcknowledgingConnect;
        _stringToValue["ConnectionPending"] = PeerState_ConnectionPending;
        _stringToValue["ConnectionSucceeded"] = PeerState_ConnectionSucceeded;
        _stringToValue["Connected"] = PeerState_Connected;
        _stringToValue["DisconnectLater"] = PeerState_DisconnectLater;
        _stringToValue["Disconnecting"] = PeerState_Disconnecting;
        _stringToValue["AcknowledgeDisconnect"] = PeerState_AcknowledgeDisconnect;
        _stringToValue["Unknown"] = PeerState_Unknown;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'PeerState'", string.c_str()));
    }
    return it->second;
}

