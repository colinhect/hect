// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\Mesh.h"

using namespace hect;

template <>
const std::string& Enum::toString<PrimitiveType>(PrimitiveType value)
{
    static std::map<PrimitiveType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[PrimitiveType_Triangles] = "Triangles";
        _valueToString[PrimitiveType_TriangleStrip] = "TriangleStrip";
        _valueToString[PrimitiveType_Lines] = "Lines";
        _valueToString[PrimitiveType_LineStrip] = "LineStrip";
        _valueToString[PrimitiveType_Points] = "Points";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'PrimitiveType'");
    }
    return it->second;
}

template <>
PrimitiveType Enum::fromString<PrimitiveType>(const std::string& string)
{
    static std::map<std::string, PrimitiveType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Triangles"] = PrimitiveType_Triangles;
        _stringToValue["TriangleStrip"] = PrimitiveType_TriangleStrip;
        _stringToValue["Lines"] = PrimitiveType_Lines;
        _stringToValue["LineStrip"] = PrimitiveType_LineStrip;
        _stringToValue["Points"] = PrimitiveType_Points;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'PrimitiveType'", string.c_str()));
    }
    return it->second;
}

