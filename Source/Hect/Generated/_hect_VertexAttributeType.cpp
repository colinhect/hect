// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\VertexAttribute.h"

using namespace hect;

template <>
const std::string& Enum::toString<VertexAttributeType>(VertexAttributeType value)
{
    static std::map<VertexAttributeType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[VertexAttributeType_Byte] = "Byte";
        _valueToString[VertexAttributeType_UnsignedByte] = "UnsignedByte";
        _valueToString[VertexAttributeType_Short] = "Short";
        _valueToString[VertexAttributeType_UnsignedShort] = "UnsignedShort";
        _valueToString[VertexAttributeType_Int] = "Int";
        _valueToString[VertexAttributeType_UnsignedInt] = "UnsignedInt";
        _valueToString[VertexAttributeType_Half] = "Half";
        _valueToString[VertexAttributeType_Float] = "Float";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'VertexAttributeType'");
    }
    return it->second;
}

template <>
VertexAttributeType Enum::fromString<VertexAttributeType>(const std::string& string)
{
    static std::map<std::string, VertexAttributeType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Byte"] = VertexAttributeType_Byte;
        _stringToValue["UnsignedByte"] = VertexAttributeType_UnsignedByte;
        _stringToValue["Short"] = VertexAttributeType_Short;
        _stringToValue["UnsignedShort"] = VertexAttributeType_UnsignedShort;
        _stringToValue["Int"] = VertexAttributeType_Int;
        _stringToValue["UnsignedInt"] = VertexAttributeType_UnsignedInt;
        _stringToValue["Half"] = VertexAttributeType_Half;
        _stringToValue["Float"] = VertexAttributeType_Float;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'VertexAttributeType'", string.c_str()));
    }
    return it->second;
}

