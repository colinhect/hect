// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\VertexAttribute.h"

using namespace hect;

template <>
const std::string& Enum::toString<VertexAttributeSemantic>(VertexAttributeSemantic value)
{
    static std::map<VertexAttributeSemantic, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[VertexAttributeSemantic_Position] = "Position";
        _valueToString[VertexAttributeSemantic_Normal] = "Normal";
        _valueToString[VertexAttributeSemantic_Color] = "Color";
        _valueToString[VertexAttributeSemantic_Tangent] = "Tangent";
        _valueToString[VertexAttributeSemantic_Binormal] = "Binormal";
        _valueToString[VertexAttributeSemantic_Weight0] = "Weight0";
        _valueToString[VertexAttributeSemantic_Weight1] = "Weight1";
        _valueToString[VertexAttributeSemantic_Weight2] = "Weight2";
        _valueToString[VertexAttributeSemantic_Weight3] = "Weight3";
        _valueToString[VertexAttributeSemantic_TextureCoords0] = "TextureCoords0";
        _valueToString[VertexAttributeSemantic_TextureCoords1] = "TextureCoords1";
        _valueToString[VertexAttributeSemantic_TextureCoords2] = "TextureCoords2";
        _valueToString[VertexAttributeSemantic_TextureCoords3] = "TextureCoords3";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'VertexAttributeSemantic'");
    }
    return it->second;
}

template <>
VertexAttributeSemantic Enum::fromString<VertexAttributeSemantic>(const std::string& string)
{
    static std::map<std::string, VertexAttributeSemantic> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Position"] = VertexAttributeSemantic_Position;
        _stringToValue["Normal"] = VertexAttributeSemantic_Normal;
        _stringToValue["Color"] = VertexAttributeSemantic_Color;
        _stringToValue["Tangent"] = VertexAttributeSemantic_Tangent;
        _stringToValue["Binormal"] = VertexAttributeSemantic_Binormal;
        _stringToValue["Weight0"] = VertexAttributeSemantic_Weight0;
        _stringToValue["Weight1"] = VertexAttributeSemantic_Weight1;
        _stringToValue["Weight2"] = VertexAttributeSemantic_Weight2;
        _stringToValue["Weight3"] = VertexAttributeSemantic_Weight3;
        _stringToValue["TextureCoords0"] = VertexAttributeSemantic_TextureCoords0;
        _stringToValue["TextureCoords1"] = VertexAttributeSemantic_TextureCoords1;
        _stringToValue["TextureCoords2"] = VertexAttributeSemantic_TextureCoords2;
        _stringToValue["TextureCoords3"] = VertexAttributeSemantic_TextureCoords3;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'VertexAttributeSemantic'", string.c_str()));
    }
    return it->second;
}

