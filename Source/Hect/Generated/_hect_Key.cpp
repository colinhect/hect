// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Input\Keyboard.h"

using namespace hect;

template <>
const std::string& Enum::toString<Key>(Key value)
{
    static std::map<Key, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[Key_Unknown] = "Unknown";
        _valueToString[Key_A] = "A";
        _valueToString[Key_B] = "B";
        _valueToString[Key_C] = "C";
        _valueToString[Key_D] = "D";
        _valueToString[Key_E] = "E";
        _valueToString[Key_F] = "F";
        _valueToString[Key_G] = "G";
        _valueToString[Key_H] = "H";
        _valueToString[Key_I] = "I";
        _valueToString[Key_J] = "J";
        _valueToString[Key_K] = "K";
        _valueToString[Key_L] = "L";
        _valueToString[Key_M] = "M";
        _valueToString[Key_N] = "N";
        _valueToString[Key_O] = "O";
        _valueToString[Key_P] = "P";
        _valueToString[Key_Q] = "Q";
        _valueToString[Key_R] = "R";
        _valueToString[Key_S] = "S";
        _valueToString[Key_T] = "T";
        _valueToString[Key_U] = "U";
        _valueToString[Key_V] = "V";
        _valueToString[Key_W] = "W";
        _valueToString[Key_X] = "X";
        _valueToString[Key_Y] = "Y";
        _valueToString[Key_Z] = "Z";
        _valueToString[Key_Num0] = "Num0";
        _valueToString[Key_Num1] = "Num1";
        _valueToString[Key_Num2] = "Num2";
        _valueToString[Key_Num3] = "Num3";
        _valueToString[Key_Num4] = "Num4";
        _valueToString[Key_Num5] = "Num5";
        _valueToString[Key_Num6] = "Num6";
        _valueToString[Key_Num7] = "Num7";
        _valueToString[Key_Num8] = "Num8";
        _valueToString[Key_Num9] = "Num9";
        _valueToString[Key_Esc] = "Esc";
        _valueToString[Key_Space] = "Space";
        _valueToString[Key_Enter] = "Enter";
        _valueToString[Key_Backspace] = "Backspace";
        _valueToString[Key_Tab] = "Tab";
        _valueToString[Key_Tick] = "Tick";
        _valueToString[Key_F1] = "F1";
        _valueToString[Key_F2] = "F2";
        _valueToString[Key_F3] = "F3";
        _valueToString[Key_F4] = "F4";
        _valueToString[Key_F5] = "F5";
        _valueToString[Key_F6] = "F6";
        _valueToString[Key_F7] = "F7";
        _valueToString[Key_F8] = "F8";
        _valueToString[Key_F9] = "F9";
        _valueToString[Key_F10] = "F10";
        _valueToString[Key_F11] = "F11";
        _valueToString[Key_F12] = "F12";
        _valueToString[Key_LeftCtrl] = "LeftCtrl";
        _valueToString[Key_LeftShift] = "LeftShift";
        _valueToString[Key_LeftAlt] = "LeftAlt";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'Key'");
    }
    return it->second;
}

template <>
Key Enum::fromString<Key>(const std::string& string)
{
    static std::map<std::string, Key> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Unknown"] = Key_Unknown;
        _stringToValue["A"] = Key_A;
        _stringToValue["B"] = Key_B;
        _stringToValue["C"] = Key_C;
        _stringToValue["D"] = Key_D;
        _stringToValue["E"] = Key_E;
        _stringToValue["F"] = Key_F;
        _stringToValue["G"] = Key_G;
        _stringToValue["H"] = Key_H;
        _stringToValue["I"] = Key_I;
        _stringToValue["J"] = Key_J;
        _stringToValue["K"] = Key_K;
        _stringToValue["L"] = Key_L;
        _stringToValue["M"] = Key_M;
        _stringToValue["N"] = Key_N;
        _stringToValue["O"] = Key_O;
        _stringToValue["P"] = Key_P;
        _stringToValue["Q"] = Key_Q;
        _stringToValue["R"] = Key_R;
        _stringToValue["S"] = Key_S;
        _stringToValue["T"] = Key_T;
        _stringToValue["U"] = Key_U;
        _stringToValue["V"] = Key_V;
        _stringToValue["W"] = Key_W;
        _stringToValue["X"] = Key_X;
        _stringToValue["Y"] = Key_Y;
        _stringToValue["Z"] = Key_Z;
        _stringToValue["Num0"] = Key_Num0;
        _stringToValue["Num1"] = Key_Num1;
        _stringToValue["Num2"] = Key_Num2;
        _stringToValue["Num3"] = Key_Num3;
        _stringToValue["Num4"] = Key_Num4;
        _stringToValue["Num5"] = Key_Num5;
        _stringToValue["Num6"] = Key_Num6;
        _stringToValue["Num7"] = Key_Num7;
        _stringToValue["Num8"] = Key_Num8;
        _stringToValue["Num9"] = Key_Num9;
        _stringToValue["Esc"] = Key_Esc;
        _stringToValue["Space"] = Key_Space;
        _stringToValue["Enter"] = Key_Enter;
        _stringToValue["Backspace"] = Key_Backspace;
        _stringToValue["Tab"] = Key_Tab;
        _stringToValue["Tick"] = Key_Tick;
        _stringToValue["F1"] = Key_F1;
        _stringToValue["F2"] = Key_F2;
        _stringToValue["F3"] = Key_F3;
        _stringToValue["F4"] = Key_F4;
        _stringToValue["F5"] = Key_F5;
        _stringToValue["F6"] = Key_F6;
        _stringToValue["F7"] = Key_F7;
        _stringToValue["F8"] = Key_F8;
        _stringToValue["F9"] = Key_F9;
        _stringToValue["F10"] = Key_F10;
        _stringToValue["F11"] = Key_F11;
        _stringToValue["F12"] = Key_F12;
        _stringToValue["LeftCtrl"] = Key_LeftCtrl;
        _stringToValue["LeftShift"] = Key_LeftShift;
        _stringToValue["LeftAlt"] = Key_LeftAlt;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'Key'", string.c_str()));
    }
    return it->second;
}

