// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Spacial\Frustum.h"

using namespace hect;

template <>
const std::string& Enum::toString<FrustumTestResult>(FrustumTestResult value)
{
    static std::map<FrustumTestResult, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[FrustumTestResult_Outside] = "Outside";
        _valueToString[FrustumTestResult_Inside] = "Inside";
        _valueToString[FrustumTestResult_Intersect] = "Intersect";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'FrustumTestResult'");
    }
    return it->second;
}

template <>
FrustumTestResult Enum::fromString<FrustumTestResult>(const std::string& string)
{
    static std::map<std::string, FrustumTestResult> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Outside"] = FrustumTestResult_Outside;
        _stringToValue["Inside"] = FrustumTestResult_Inside;
        _stringToValue["Intersect"] = FrustumTestResult_Intersect;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'FrustumTestResult'", string.c_str()));
    }
    return it->second;
}

