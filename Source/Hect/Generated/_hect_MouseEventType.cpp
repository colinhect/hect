// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Input\Mouse.h"

using namespace hect;

template <>
const std::string& Enum::toString<MouseEventType>(MouseEventType value)
{
    static std::map<MouseEventType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[MouseEventType_Movement] = "Movement";
        _valueToString[MouseEventType_ButtonDown] = "ButtonDown";
        _valueToString[MouseEventType_ButtonUp] = "ButtonUp";
        _valueToString[MouseEventType_ScrollDown] = "ScrollDown";
        _valueToString[MouseEventType_ScrollUp] = "ScrollUp";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'MouseEventType'");
    }
    return it->second;
}

template <>
MouseEventType Enum::fromString<MouseEventType>(const std::string& string)
{
    static std::map<std::string, MouseEventType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Movement"] = MouseEventType_Movement;
        _stringToValue["ButtonDown"] = MouseEventType_ButtonDown;
        _stringToValue["ButtonUp"] = MouseEventType_ButtonUp;
        _stringToValue["ScrollDown"] = MouseEventType_ScrollDown;
        _stringToValue["ScrollUp"] = MouseEventType_ScrollUp;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'MouseEventType'", string.c_str()));
    }
    return it->second;
}

