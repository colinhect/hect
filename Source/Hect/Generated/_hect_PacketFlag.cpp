// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Network\Packet.h"

using namespace hect;

template <>
const std::string& Enum::toString<PacketFlag>(PacketFlag value)
{
    static std::map<PacketFlag, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[PacketFlag_Reliable] = "Reliable";
        _valueToString[PacketFlag_Unsequenced] = "Unsequenced";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'PacketFlag'");
    }
    return it->second;
}

template <>
PacketFlag Enum::fromString<PacketFlag>(const std::string& string)
{
    static std::map<std::string, PacketFlag> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Reliable"] = PacketFlag_Reliable;
        _stringToValue["Unsequenced"] = PacketFlag_Unsequenced;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'PacketFlag'", string.c_str()));
    }
    return it->second;
}

