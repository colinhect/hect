// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\ShaderModule.h"

using namespace hect;

template <>
const std::string& Enum::toString<ShaderModuleType>(ShaderModuleType value)
{
    static std::map<ShaderModuleType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[ShaderModuleType_Vertex] = "Vertex";
        _valueToString[ShaderModuleType_Pixel] = "Pixel";
        _valueToString[ShaderModuleType_Geometry] = "Geometry";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'ShaderModuleType'");
    }
    return it->second;
}

template <>
ShaderModuleType Enum::fromString<ShaderModuleType>(const std::string& string)
{
    static std::map<std::string, ShaderModuleType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Vertex"] = ShaderModuleType_Vertex;
        _stringToValue["Pixel"] = ShaderModuleType_Pixel;
        _stringToValue["Geometry"] = ShaderModuleType_Geometry;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'ShaderModuleType'", string.c_str()));
    }
    return it->second;
}

