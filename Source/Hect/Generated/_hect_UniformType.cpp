// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\UniformValue.h"

using namespace hect;

template <>
const std::string& Enum::toString<UniformType>(UniformType value)
{
    static std::map<UniformType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[UniformType_Int] = "Int";
        _valueToString[UniformType_Float] = "Float";
        _valueToString[UniformType_Vector2] = "Vector2";
        _valueToString[UniformType_Vector3] = "Vector3";
        _valueToString[UniformType_Vector4] = "Vector4";
        _valueToString[UniformType_Matrix4] = "Matrix4";
        _valueToString[UniformType_Texture] = "Texture";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'UniformType'");
    }
    return it->second;
}

template <>
UniformType Enum::fromString<UniformType>(const std::string& string)
{
    static std::map<std::string, UniformType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Int"] = UniformType_Int;
        _stringToValue["Float"] = UniformType_Float;
        _stringToValue["Vector2"] = UniformType_Vector2;
        _stringToValue["Vector3"] = UniformType_Vector3;
        _stringToValue["Vector4"] = UniformType_Vector4;
        _stringToValue["Matrix4"] = UniformType_Matrix4;
        _stringToValue["Texture"] = UniformType_Texture;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'UniformType'", string.c_str()));
    }
    return it->second;
}

