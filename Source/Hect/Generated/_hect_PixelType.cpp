// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Graphics\Image.h"

using namespace hect;

template <>
const std::string& Enum::toString<PixelType>(PixelType value)
{
    static std::map<PixelType, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[PixelType_Half] = "Half";
        _valueToString[PixelType_Float] = "Float";
        _valueToString[PixelType_Byte] = "Byte";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'PixelType'");
    }
    return it->second;
}

template <>
PixelType Enum::fromString<PixelType>(const std::string& string)
{
    static std::map<std::string, PixelType> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Half"] = PixelType_Half;
        _stringToValue["Float"] = PixelType_Float;
        _stringToValue["Byte"] = PixelType_Byte;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'PixelType'", string.c_str()));
    }
    return it->second;
}

