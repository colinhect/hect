// Generated by reflect.py
#include <Hect/Core/Enum.h>
#include <Hect/Core/Error.h>
#include <Hect/Core/Format.h>

#include "..\Core\Logging.h"

using namespace hect;

template <>
const std::string& Enum::toString<LogLevel>(LogLevel value)
{
    static std::map<LogLevel, std::string> _valueToString;
    if (_valueToString.empty())
    {
        _valueToString[LogLevel_Info] = "Info";
        _valueToString[LogLevel_Debug] = "Debug";
        _valueToString[LogLevel_Warning] = "Warning";
        _valueToString[LogLevel_Error] = "Error";
        _valueToString[LogLevel_Trace] = "Trace";
    }
    auto it = _valueToString.find(value);
    if (it == _valueToString.end())
    {
       throw Error("Invalid value for enum 'LogLevel'");
    }
    return it->second;
}

template <>
LogLevel Enum::fromString<LogLevel>(const std::string& string)
{
    static std::map<std::string, LogLevel> _stringToValue;
    if (_stringToValue.empty())
    {
        _stringToValue["Info"] = LogLevel_Info;
        _stringToValue["Debug"] = LogLevel_Debug;
        _stringToValue["Warning"] = LogLevel_Warning;
        _stringToValue["Error"] = LogLevel_Error;
        _stringToValue["Trace"] = LogLevel_Trace;
    }
    auto it = _stringToValue.find(string);
    if (it == _stringToValue.end())
    {
       throw Error(format("Invalid value '%s' for enum 'LogLevel'", string.c_str()));
    }
    return it->second;
}

