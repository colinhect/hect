import glob
import os
import sys
import re
import xml.etree.ElementTree as ET

class Type:
    def __init__(self, header, name):
        self.header = header
        self.name = name
        
class EnumType(Type):
    def __init__(self, header, name, values):
        Type.__init__(self, header, name)
        self.values = values
        
class ClassType(Type):
    def __init__(self, header, name, properties):
        Type.__init__(self, header, name)
        self.properties = properties
        
setter_regex = re.compile(".*Setter for property \<emphasis\>([a-zA-Z0-9]+)\<\/emphasis\>.*", re.DOTALL)
getter_regex = re.compile(".*Getter for property \<emphasis\>([a-zA-Z0-9]+)\<\/emphasis\>.*", re.DOTALL)

def process_xml(root):
    types = []
    for compounddef in root.iter("compounddef"):
        
        # Get the name of the type
        name = compounddef.find("compoundname").text
        
        # Get the path to the header file
        header = compounddef.find("location")
        if not header is None:
            header = header.attrib["file"]
                
        # Get the kind of the type
        kind = compounddef.attrib["kind"]
        
        # If the kind is a namespace then it will be treated as an enum
        if kind == "namespace" and name != "hect":
            values = []
            for sectiondef in compounddef.iter("sectiondef"):
                for memberdef in compounddef.iter("memberdef"):
                    for enumvalue in memberdef.iter("enumvalue"):
                        values.append((enumvalue.find("name").text, name + "::" + enumvalue.find("name").text))
            name = name + "::Enum"
            types.append(EnumType(header, name, values))
        elif kind == "class" or kind == "struct":
            is_template = False
            for templateparamlist in compounddef.iter("templateparamlist"):
                is_template = True
            if not is_template and compounddef.attrib["prot"] == "public":
                properties = { }
                for memberdef in root.iter("memberdef"):
                    if memberdef.attrib["kind"] == "function":
                        detaileddescription = memberdef.find("detaileddescription")
                        if not detaileddescription is None:
                            text = str(ET.tostring(detaileddescription, encoding='utf8', method='xml'))
                            if not text is None:
                                setter_match = setter_regex.match(text)
                                getter_match = getter_regex.match(text)
                                if setter_match:
                                    property_name = setter_match.group(1)
                                    if not property_name in properties:
                                        properties[property_name] = { }
                                    properties[property_name]["setter"] = memberdef.find("name").text
                                elif getter_match:
                                    property_name = getter_match.group(1)
                                    if not property_name in properties:
                                        properties[property_name] = { }
                                    properties[property_name]["getter"] = memberdef.find("name").text
                                    if not memberdef.find("type").text is None:
                                        type_text = memberdef.find("type").text
                                    else:
                                        type_text = memberdef.find("type").find("ref").text
                                    properties[property_name]["type"] = type_text.replace("const ", "").replace("&", "").strip()
                types.append(ClassType(header, name, properties))
    return types

if __name__ == "__main__":
    types = []
    
    for file_name in glob.glob(sys.argv[1]):
        with open(file_name, "r") as in_file:
            root = ET.fromstring(in_file.read())
            types.extend(process_xml(root))
            
    for type in types:
        type.name = type.name.replace("hect::", "").strip()
    
    with open(sys.argv[2], "w") as code:
        code.write("// Generated by generate_types.py\n\n")
        code.write("#include \"Hect/Reflection/Type.h\"\n")
        for type in types:
            code.write("#include \"" + type.header + "\"\n")
        code.write("\n")
        code.write("using namespace hect;\n\n")
        code.write("class " + sys.argv[3] + "\n")
        code.write("{\n")
        code.write("public:\n")
        code.write("    " + sys.argv[3] + "()\n")
        code.write("    {\n")
        for type in types:
            code.write("        // " + type.name + "\n")
            code.write("        Type::addRegisterFunction([]()\n")
            code.write("        {\n")
            code.write("            Type::create<" + type.name + ">(\"" + type.name + "\");\n")
            if isinstance(type, EnumType):
                for value in type.values:
                    code.write("            Enum::add<" + type.name + ">(\"" + value[0] + "\", " + value[1] + ");\n")
            code.write("        });\n")
        code.write("    }\n")
        code.write("} _" + sys.argv[3] + ";\n\n")
        
        primitives = [
            ("std::string", "jsonValue.asString()"),
            ("float", "(float)jsonValue.asDouble()"),
            ("double", "jsonValue.asDouble()"),
            ("uint8_t", "(uint8_t)jsonValue.asUnsigned()"),
            ("uint16_t", "(uint16_t)jsonValue.asUnsigned()"),
            ("uint32_t", "(uint32_t)jsonValue.asUnsigned()"),
            ("uint64_t", "(uint64_t)jsonValue.asUnsigned()"),
            ("int8_t", "(int8_t)jsonValue.asInt()"),
            ("int16_t", "(int16_t)jsonValue.asInt()"),
            ("int32_t", "(int32_t)jsonValue.asInt()"),
            ("int64_t", "(int64_t)jsonValue.asInt()")
            ]
        for primitive in primitives:
            code.write("template <>\n")
            code.write("HECT_API void Object::fromJson<" + primitive[0] + ">(" + primitive[0]+ "& object, const JsonValue& jsonValue)\n")
            code.write("{\n")
            code.write("    object = " + primitive[1] + ";\n")
            code.write("}\n")
            code.write("\n")
            
        for type in types:
            code.write("template <>\n")
            code.write("HECT_API void Object::fromJson<" + type.name + ">(" + type.name + "&, const JsonValue&);\n")
            code.write("\n")
        
        for type in types:
            if (isinstance(type, ClassType) and len(type.properties) > 0) or isinstance(type, EnumType):
                code.write("template <>\n")
                code.write("HECT_API void Object::fromJson<" + type.name + ">(" + type.name + "& object, const JsonValue& jsonValue)\n")
                code.write("{\n")
                if isinstance(type, ClassType):
                    for property_name in type.properties:
                        code.write("    if (!jsonValue[\"" + property_name + "\"].isNull())\n")
                        code.write("    {\n")
                        property = type.properties[property_name]
                        code.write("        " + property["type"] + " propertyValue;\n")
                        code.write("        Object::fromJson<" + property["type"] + ">(propertyValue, jsonValue[\"" + property_name + "\"]);\n")
                        code.write("        object." + property["setter"] + "(propertyValue);\n")
                        code.write("    }\n")
                elif isinstance(type, EnumType):
                    code.write("    object = Enum::fromString<" + type.name + ">(jsonValue.asString());\n")
                code.write("}\n")
                code.write("\n")
        