import glob
import os
import sys
import xml.etree.ElementTree as ET

class ReflectType:
    def __init__(self, header, kind, name, values = []):
        self.header = header
        self.kind = kind
        self.name = name
        self.values = values

if __name__ == "__main__":
    types = []
    
    for file_name in glob.glob(sys.argv[1]):
        with open(file_name, "r") as in_file:
            xml_string = in_file.read()
            root = ET.fromstring(xml_string)
            for compounddef in root.iter("compounddef"):
                name = compounddef.find("compoundname").text
                header = compounddef.find("location")
                if not header is None:
                    header = header.attrib["file"]
                if compounddef.attrib["kind"] == "class":
                    kind = "Kind::Class"
                elif compounddef.attrib["kind"] == "struct":
                    kind = "Kind::Structure"
                elif compounddef.attrib["kind"] == "namespace":
                    kind = "Kind::Enumeration"
                else:
                    break;
                if kind == "Kind::Enumeration":
                    if name != "hect":
                        values = []
                        for sectiondef in compounddef.iter("sectiondef"):
                            for memberdef in compounddef.iter("memberdef"):
                                for enumvalue in memberdef.iter("enumvalue"):
                                    values.append((enumvalue.find("name").text, name + "::" + enumvalue.find("name").text))
                        name = name + "::Enum"
                        types.append(ReflectType(header, kind, name, values))
                else:
                    is_template = False
                    for templateparamlist in compounddef.iter("templateparamlist"):
                        is_template = True
                    if not is_template and compounddef.attrib["prot"] == "public":
                        types.append(ReflectType(header, kind, name))

    with open(sys.argv[2], "w") as out_file:
        out_file.write("// This file is automatically generated\n\n")
        out_file.write("#include \"Hect/Reflection/Type.h\"\n")
        for type in types:
            out_file.write("#include \"" + type.header + "\"\n")
        out_file.write("\n")
        out_file.write("using namespace hect;\n")
        out_file.write("\n")
        out_file.write("class " + sys.argv[3] + "\n")
        out_file.write("{\n")
        out_file.write("public:\n")
        out_file.write("    " + sys.argv[3] + "()\n")
        out_file.write("    {\n")
        for type in types:
            out_file.write("        // " + type.name + "\n")
            out_file.write("        Type::addRegisterFunction([]()\n")
            out_file.write("        {\n")
            out_file.write("            Type::create<" + type.name + ">(" + type.kind  + ", \"" + type.name + "\");\n")
            for value in type.values:
                out_file.write("            Enum::add<" + type.name + ">(\"" + value[0] + "\", " + value[1] + ");\n")
            out_file.write("        });\n")
        out_file.write("    }\n")
        out_file.write("} _" + sys.argv[3] + ";\n")