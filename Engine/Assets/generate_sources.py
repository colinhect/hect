import os
import sys

blacklist = [ "generate_sources.py", "Sources.cmake" ]

def process(input_directory, output_filename):
    filepaths = []
    for root, dirs, files in os.walk(input_directory):
        if input_directory == ".":
            root = os.path.relpath(root)
        else:
            root = os.path.relpath(root, input_directory)

        for basename in files:
            if basename not in blacklist:
                filepaths.append(os.path.join(root, basename))

    with open(output_filename, "w") as file:
        file.write("# Generated by generate_sources.py\n\n")
        groups = {}
        for filepath in filepaths:
            group = os.path.split(filepath)[0]
            if not group in groups:
                groups[group] = []
            groups[group].append(filepath.replace("\\", "/"))

        keys = sorted(groups.keys(), key=lambda s: s.lower())
        for group in keys:
            group_postfix = resolve_group_postfix(group)
            group_name = resolve_group_name(group)

            file.write("set(SOURCE{}\n".format(group_postfix))
            for filepath in groups[group]:
                file.write("    \"{}\"\n".format(filepath))
            file.write("    )\n\n")

            if len(group_postfix) > 0:
                file.write("source_group(\"{}\" FILES ${{SOURCE{}}})\n\n".format(group_name, group_postfix))

        file.write("set(SOURCE_FILES\n")
        for group in keys:
            group_postfix = resolve_group_postfix(group)
            file.write("    ${{SOURCE{}}}\n".format(group_postfix))
        file.write("    )\n\n")

def resolve_group_postfix(group):
    group_postfix = group.replace("\\", "_").upper()
    if group == ".":
        group_postfix = ""
    else:
        group_postfix = "_" + group_postfix
    return group_postfix

def resolve_group_name(group):
    return group.replace("\\", "\\\\")

def main():
    input_directory = "."
    output_filename = "Sources.cmake"
    process(input_directory, output_filename)

if __name__ == "__main__":
    main()
