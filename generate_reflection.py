import glob
import os
import xml.etree.ElementTree as ET

class ReflectType:
    def __init__(self, header, kind, name):
        self.header = header
        self.kind = kind
        self.name = name

if __name__ == "__main__":
    types = []
    
    for file_name in glob.glob("Doc/xml/*.xml"):
        with open(file_name, "r") as in_file:
            xml_string = in_file.read()
            root = ET.fromstring(xml_string)
            for compounddef in root.iter("compounddef"):
                name = compounddef.find("compoundname").text
                header = compounddef.find("location").attrib["file"]
                if compounddef.attrib["kind"] == "class":
                    kind = "Kind::Class"
                elif compounddef.attrib["kind"] == "struct":
                    kind = "Kind::Structure"
                elif compounddef.attrib["kind"] == "namespace":
                    kind = "Kind::Enumeration"
                else:
                    break;
                if kind == "Kind::Enumeration":
                    if name != "hect":
                        name = name + "::Enum"
                        types.append(ReflectType(header, kind, name))
                else:
                    is_template = False
                    for templateparamlist in compounddef.iter("templateparamlist"):
                        is_template = True
                    if not is_template and compounddef.attrib["prot"] == "public":
                        types.append(ReflectType(header, kind, name))

    with open("Source/Hect/Reflection/_RegisterTypes.cpp", "w") as out_file:
        out_file.write("// This file is automatically generated\n")
        out_file.write("#include \"Type.h\"\n")
        for type in types:
            out_file.write("#include \"" + type.header + "\"\n")
        out_file.write("\n")
        out_file.write("using namespace hect;\n")
        out_file.write("\n")
        out_file.write("void Type::registerTypes()\n")
        out_file.write("{\n")
        for type in types:
            out_file.write("    // " + type.name + "\n")
            out_file.write("    {\n")
            out_file.write("        Kind::Enum kind = " + type.kind + ";\n")
            out_file.write("        std::string name = \"" + type.name + "\";\n")
            out_file.write("        Type& type = Type::create<" + type.name + ">(kind, name);\n")
            out_file.write("        type;\n")
            out_file.write("    }\n")
        out_file.write("}\n")