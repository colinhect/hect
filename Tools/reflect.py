import glob
import os
import sys
import re
import xml.etree.ElementTree as ET

class Type:
    def __init__(self, header, namespace, name):
        self.header = header
        self.namespace = namespace
        self.name = name
        
class EnumType(Type):
    def __init__(self, header, namespace, name, values):
        Type.__init__(self, header, namespace, name)
        self.values = values

def process_xml(root):
    types = []
    for compounddef in root.iter("compounddef"):
        if "kind" in compounddef.attrib and compounddef.attrib["kind"] == "namespace":
            namespace = compounddef.find("compoundname").text
            for memberdef in compounddef.iter("memberdef"):
                kind = memberdef.attrib["kind"]
                if kind == "enum":
                
                    # Get the name of the type
                    name = memberdef.find("name").text
                
                    # Get the path to the header file
                    header = memberdef.find("location")
                    if not header is None:
                        header = header.attrib["file"]
                        
                    values = []
                    for enumvalue in memberdef.iter("enumvalue"):
                        values.append(enumvalue.find("name").text)
                            
                    types.append(EnumType(header, namespace, name, values))
    return types
    
def generate_enum(output_dir, type):
    file_name = "_" + type.namespace + "_" + type.name + ".cpp"
    file_name = os.path.join(output_dir, file_name)
    with open(file_name, "w") as f:
        header_path = os.path.relpath(type.header, output_dir)
        f.write("// Generated by reflect.py\n")
        f.write("#include <Hect/Core/Enum.h>\n")
        f.write("#include <Hect/Core/Error.h>\n")
        f.write("#include <Hect/Core/Format.h>\n\n")
        f.write("#include \"" + header_path + "\"\n\n")
        if type.namespace is not None:
            f.write("using namespace " + type.namespace + ";\n\n")
        f.write("template <>\n")
        f.write("const std::string& Enum::toString<" + type.name + ">(" + type.name + " value)\n")
        f.write("{\n")
        f.write("    static std::map<" + type.name + ", std::string> _valueToString;\n")
        f.write("    if (_valueToString.empty())\n")
        f.write("    {\n")
        for value in type.values:
            str_value = value
            if "_" in str_value:
                str_value = str_value.split("_", 1)[1]
                f.write("        _valueToString[" + value + "] = \"" + str_value + "\";\n");
        f.write("    }\n")
        f.write("    auto it = _valueToString.find(value);\n")
        f.write("    if (it == _valueToString.end())\n")
        f.write("    {\n")
        f.write("       throw Error(\"Invalid value for enum '" + type.name + "'\");\n")
        f.write("    }\n")
        f.write("    return it->second;\n")
        f.write("}\n\n")
        f.write("template <>\n")
        f.write(type.name + " Enum::fromString<" + type.name + ">(const std::string& string)\n")
        f.write("{\n")
        f.write("    static std::map<std::string, " + type.name + "> _stringToValue;\n")
        f.write("    if (_stringToValue.empty())\n")
        f.write("    {\n")
        for value in type.values:
            str_value = value
            if "_" in str_value:
                str_value = str_value.split("_", 1)[1]
                f.write("        _stringToValue[\"" + str_value + "\"] = " + value + ";\n");
        f.write("    }\n")
        f.write("    auto it = _stringToValue.find(string);\n")
        f.write("    if (it == _stringToValue.end())\n")
        f.write("    {\n")
        f.write("       throw Error(format(\"Invalid value '%s' for enum '" + type.name + "'\", string.c_str()));\n")
        f.write("    }\n")
        f.write("    return it->second;\n")
        f.write("}\n\n")
    
if __name__ == "__main__":
    types = []

    input_dir = sys.argv[1]
    output_dir = sys.argv[2]
    
    # Process each file
    for file_name in glob.glob(input_dir):
        if os.path.isfile(file_name):
            with open(file_name, "r") as in_file:
                root = ET.fromstring(in_file.read())
                types.extend(process_xml(root))
    
    for type in types:
        if isinstance(type, EnumType):
            generate_enum(output_dir, type)
            
        