import glob
import os
import sys
import re
import xml.etree.ElementTree as ET

class Type:
    def __init__(self, header, name):
        self.header = header
        self.name = name
        
class EnumType(Type):
    def __init__(self, header, name, values):
        Type.__init__(self, header, name)
        self.values = values

def process_xml(root):
    types = []
    for compounddef in root.iter("compounddef"):
        
        # Get the name of the type
        name = compounddef.find("compoundname").text
        
        # Get the path to the header file
        header = compounddef.find("location")
        if not header is None:
            header = header.attrib["file"]
                
        # Get the kind of the type
        kind = compounddef.attrib["kind"]
        
        # If the kind is a namespace then it will be treated as an enum
        if kind == "namespace" and name != "hect":
            values = []
            for sectiondef in compounddef.iter("sectiondef"):
                for memberdef in compounddef.iter("memberdef"):
                    for enumvalue in memberdef.iter("enumvalue"):
                        values.append((enumvalue.find("name").text, name + "::" + enumvalue.find("name").text))
            name = name + "::Enum"
            types.append(EnumType(header, name, values))
    return types

if __name__ == "__main__":
    types = []
    
    for file_name in glob.glob(sys.argv[1]):
        with open(file_name, "r") as in_file:
            root = ET.fromstring(in_file.read())
            types.extend(process_xml(root))
            
    for type in types:
        type.name = type.name.replace("hect::", "").strip()
    
    with open(sys.argv[2], "w") as code:
        code.write("// Generated by reflect.py\n\n")
        code.write("#include \"Hect/Reflection/Type.h\"\n")
        code.write("#include \"Hect/Reflection/Enum.h\"\n")
        for type in types:
            code.write("#include \"" + type.header + "\"\n")
        code.write("\n")
        code.write("using namespace hect;\n\n")
        code.write("class " + sys.argv[3] + "\n")
        code.write("{\n")
        code.write("public:\n")
        code.write("    " + sys.argv[3] + "()\n")
        code.write("    {\n")
        for type in types:
            code.write("        // " + type.name + "\n")
            code.write("        Type::addRegisterFunction([]()\n")
            code.write("        {\n")
            code.write("            Type::create<" + type.name + ">(\"" + type.name + "\");\n")
            if isinstance(type, EnumType):
                for value in type.values:
                    code.write("            Enum::add<" + type.name + ">(\"" + value[0] + "\", " + value[1] + ");\n")
            code.write("        });\n")
        code.write("    }\n")
        code.write("} _" + sys.argv[3] + ";\n\n")